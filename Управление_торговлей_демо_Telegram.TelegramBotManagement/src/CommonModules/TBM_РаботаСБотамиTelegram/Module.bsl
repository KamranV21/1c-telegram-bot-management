#Область ПрограммныйИнтерфейс 

// Выполняет запуск заданий по взаимодействию с ботами Telegram.
//
// Параметры:
//  ИмяБота - Строка - Строка с именем бота.
Процедура TBM_ВзаимодействиеСБотамиTelegram(ИмяБота) Экспорт

	ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.TBM_ВзаимодействиеСБотамиTelegram);

	Бот = НайтиБотаTelegramПоИмени(ИмяБота);

	Если Не ЗначениеЗаполнено(Бот) Тогда

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Бот.Метаданные(), Бот, СтрШаблон(НСтр(
			"en = 'Bot named %1 was found'; ru = 'Не найден бот с именем %1'; az = '%1 adlı bot tapılmadı'"), ИмяБота));

		Возврат;

	КонецЕсли;

	ОбработатьПолученныеСообщенияБота(Бот);

КонецПроцедуры

// Загружает и обрабатывает все сообщения, полученные ботом.
//
// Параметры:
//  Бот - СправочникСсылка.TBM_БотыTelegram - Бот Telegram.
//
Процедура ОбработатьПолученныеСообщенияБота(Бот) Экспорт

	ПолученныеСообщения = ПолученныеСообщенияБота(Бот);

	Если ПолученныеСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСообщений = ПолученныеСообщенияВТаблицуЗначений(ПолученныеСообщения);
	ОтветитьНаПолученныеСообщения(Бот, ТаблицаСообщений);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает токен бота Telegram.
// 
// Параметры:
//  Бот - СправочникСсылка.TBM_БотыTelegram - Бот
// 
// Возвращаемое значение:
//  Строка - Токен бота Telegram
Функция ТокенБотаTelegram(Бот) Экспорт

	ИдентификаторБота = Справочники.TBM_БотыTelegram.ИдентификаторЭлементаБотаСПрефиксом(Бот);

	УстановитьПривилегированныйРежим(Истина);
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторБота);
	УстановитьПривилегированныйРежим(Ложь);

	Если ТипЗнч(Токен) = Тип("Строка") Тогда
		Возврат Токен;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область HTTPЗапросы

Функция ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса)

	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();

	HTTPСоединение = Новый HTTPСоединение(ПараметрыHTTPЗапроса.БазовыйURL, , , , , ПараметрыHTTPЗапроса.Таймаут,
		ЗащищенноеСоединение);

	АдресРесурса = "/bot" + ПараметрыHTTPЗапроса.Токен + "/" + ПараметрыHTTPЗапроса.ИмяМетода;

	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ПараметрыHTTPЗапроса.Заголовки);

	Если ЗначениеЗаполнено(ПараметрыHTTPЗапроса.ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыHTTPЗапроса.ТелоЗапроса);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыHTTPЗапроса.ТелоЗапросаДвоичныеДанные) Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыHTTPЗапроса.ТелоЗапросаДвоичныеДанные);
	КонецЕсли;

	Попытка

		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ПараметрыHTTPЗапроса.HTTPМетод, HTTPЗапрос);
		Возврат HTTPОтвет;

	Исключение

		ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ПараметрыHTTPЗапроса.Бот.Метаданные(),
			ПараметрыHTTPЗапроса.Бот, СтрШаблон(НСтр("en = 'Error: %1'; ru = 'Ошибка: %1'; az = 'Səhv: %1'"),
			ПодробноеПредставлениеОшибки));

		Возврат Неопределено;

	КонецПопытки;

КонецФункции

Функция НоваяСтруктураПараметровHTTPЗапроса()

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	Структура = Новый Структура;
	Структура.Вставить("Бот", Справочники.TBM_БотыTelegram.ПустаяСсылка());
	Структура.Вставить("БазовыйURL", "api.telegram.org");
	Структура.Вставить("Токен", "");
	Структура.Вставить("ИмяМетода", "");
	Структура.Вставить("HTTPМетод", "POST");
	Структура.Вставить("Заголовки", Заголовки);
	Структура.Вставить("Таймаут", 30);
	Структура.Вставить("ТелоЗапроса", "");
	Структура.Вставить("ТелоЗапросаДвоичныеДанные", Неопределено);

	Возврат Структура;

КонецФункции

#КонецОбласти

#Область ОбработкаПолученныхСообщений

Процедура ОтветитьНаПолученныеСообщения(Бот, ТаблицаСообщений)

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ТаблицаСообщений.ТекстСообщения КАК ТекстСообщения,
						  |	ТаблицаСообщений.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ТаблицаСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения
						  |ПОМЕСТИТЬ ВтТаблицаСообщений
						  |ИЗ
						  |	&ТаблицаСообщений КАК ТаблицаСообщений
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВтТаблицаСообщений.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ВтТаблицаСообщений.ТекстСообщения КАК ТекстСообщения,
						  |	ВтТаблицаСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
						  |	ЕСТЬNULL(ПерсональныеКоманды.Действие, ЕСТЬNULL(ОбщиеКоманды.Действие,
						  |		ЗНАЧЕНИЕ(Справочник.TBM_ДействияБотовTelegram.ПустаяСсылка))) КАК Действие
						  |ПОМЕСТИТЬ ВтДействия
						  |ИЗ
						  |	ВтТаблицаСообщений КАК ВтТаблицаСообщений
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TBM_КомандыБотовTelegram КАК ПерсональныеКоманды
						  |		ПО ПерсональныеКоманды.Бот = &Бот
						  |		И ВтТаблицаСообщений.ТекстСообщения = ПерсональныеКоманды.Команда
						  |		И ВтТаблицаСообщений.ИдентификаторЧата = ПерсональныеКоманды.Чат.Код
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TBM_КомандыБотовTelegram КАК ОбщиеКоманды
						  |		ПО ОбщиеКоманды.Бот = &Бот
						  |		И ВтТаблицаСообщений.ТекстСообщения = ОбщиеКоманды.Команда
						  |		И ОбщиеКоманды.Чат = ЗНАЧЕНИЕ(Справочник.TBM_ЧатыTelegram.ПустаяСсылка)
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TBM_ОбработанныеСообщенияБотовTelegram КАК ОбработанныеСообщения
						  |		ПО ВтТаблицаСообщений.ИдентификаторСообщения = ОбработанныеСообщения.ИдентификаторСообщения
						  |		И ВтТаблицаСообщений.ИдентификаторЧата = ОбработанныеСообщения.Чат.Код
						  |		И ОбработанныеСообщения.Бот = &Бот
						  |ГДЕ
						  |	ОбработанныеСообщения.ИдентификаторСообщения ЕСТЬ NULL
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВтДействия.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ВтДействия.ТекстСообщения КАК ТекстСообщения,
						  |	ВтДействия.ИдентификаторСообщения КАК ИдентификаторСообщения,
						  |	ЕСТЬNULL(ЧатыTelegram.Ссылка, ЗНАЧЕНИЕ(Справочник.TBM_ЧатыTelegram.ПустаяСсылка)) КАК Чат,
						  |	ВтДействия.Действие КАК Действие
						  |ПОМЕСТИТЬ ВтДействияЧаты
						  |ИЗ
						  |	ВтДействия КАК ВтДействия
						  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.TBM_ЧатыTelegram КАК ЧатыTelegram
						  |		ПО ВтДействия.ИдентификаторЧата = ЧатыTelegram.Код
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВтДействияЧаты.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ВтДействияЧаты.ТекстСообщения КАК ТекстСообщения,
						  |	ВтДействияЧаты.ИдентификаторСообщения КАК ИдентификаторСообщения,
						  |	ВтДействияЧаты.Чат КАК Чат,
						  |	ВтДействияЧаты.Действие КАК Действие,
						  |	ВтДействияЧаты.Действие.ТипДействия КАК ТипДействия,
						  |	ВтДействияЧаты.Действие.ПроизвольныйКод КАК ПроизвольныйКод
						  |ИЗ
						  |	ВтДействияЧаты КАК ВтДействияЧаты
						  |ИТОГИ
						  |ПО
						  |	Действие
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	Этапы.Ссылка КАК Разговор,
						  |	Этапы.Ссылка.Чат КАК Чат,
						  |	Этапы.Этап КАК Этап,
						  |	Этапы.Этап.ПроизвольныйКод КАК ПроизвольныйКод
						  |ИЗ
						  |	Справочник.TBM_ПоэтапныеДействияБотовTelegram.Этапы КАК Этапы
						  |ГДЕ
						  |	Этапы.Ссылка.Бот = &Бот
						  |	И Этапы.Ссылка.Чат В
						  |		(ВЫБРАТЬ
						  |			Т.Чат
						  |		ИЗ
						  |			ВтДействияЧаты КАК Т)
						  |	И НЕ Этапы.Ссылка.Завершено
						  |	И НЕ Этапы.Завершено
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	Этапы.НомерСтроки");
	Запрос.УстановитьПараметр("ТаблицаСообщений", ТаблицаСообщений);
	Запрос.УстановитьПараметр("Бот", Бот);

	МассивРезультатов = Запрос.ВыполнитьПакет();

	РезультатДействия = МассивРезультатов[МассивРезультатов.Количество() - 2];

	ВыборкаДействия = РезультатДействия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДействия.Следующий() Цикл

		Если ВыборкаДействия.ТипДействия = Перечисления.TBM_ТипыДействийБотовTelegram.ОтправкаОтчета Тогда

			ОтправитьОтчетыВЧаты(Бот, ВыборкаДействия);

		ИначеЕсли ВыборкаДействия.ТипДействия = Перечисления.TBM_ТипыДействийБотовTelegram.МногоэтапноеДействие Тогда

			ЗапуститьМногоэтапноеДействие(Бот, ВыборкаДействия);

		ИначеЕсли ВыборкаДействия.ТипДействия = Перечисления.TBM_ТипыДействийБотовTelegram.ПроизвольноеДействие Тогда

			ВыполнитьДействиеИОтправитьСообщениеВЧат(Бот, ВыборкаДействия);

		Иначе

			ТекущиеАктивныеДействияЧатов = МассивРезультатов[МассивРезультатов.Количество() - 1].Выбрать();

			ВыборкаЧаты = ВыборкаДействия.Выбрать();
			Пока ВыборкаЧаты.Следующий() Цикл

				СтруктураПоиска = Новый Структура("Чат", ВыборкаЧаты.Чат);

				ТекущиеАктивныеДействияЧатов.Сбросить();
				Если ТекущиеАктивныеДействияЧатов.НайтиСледующий(СтруктураПоиска) Тогда
					ПараметровВыполненияЭтапа = НоваяСтруктураПараметровВыполненияЭтапа();
					ПараметровВыполненияЭтапа.Бот = Бот;
					ПараметровВыполненияЭтапа.Чат = ВыборкаЧаты.Чат;
					ПараметровВыполненияЭтапа.ИдентификаторЧата = ВыборкаЧаты.ИдентификаторЧата;
					ПараметровВыполненияЭтапа.МногоэтапноеДействие = ВыборкаДействия.Действие;
					ПараметровВыполненияЭтапа.ТекущийЭтап = ТекущиеАктивныеДействияЧатов.Этап;
					ПараметровВыполненияЭтапа.Разговор = ТекущиеАктивныеДействияЧатов.Разговор;
					ВыполнитьПроизвольныйКод(ТекущиеАктивныеДействияЧатов.ПроизвольныйКод, ПараметровВыполненияЭтапа);
				Иначе
		        	// TODO: неизвестная команда			
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолученныеСообщенияБота(Бот)

	ПараметрыПолученияСообщенийКБоту = ПараметрыПолученияСообщенийКБоту(Бот);

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "getUpdates";
	ПараметрыHTTPЗапроса.ТелоЗапроса = TBM_РаботаСJSON.JSONИзЗначения(ПараметрыПолученияСообщенийКБоту);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);
	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Ответ = TBM_РаботаСJSON.ЗначениеИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());

	Возврат Ответ.result;

КонецФункции

Функция ПараметрыПолученияСообщенийКБоту(Бот)

	ИдентификаторПоследнегоСообщения = ИдентификаторПоследнегоОбработанногоСообщения(Бот);

	ПараметрыПолученияСообщенийКБоту = Новый Структура;
	ПараметрыПолученияСообщенийКБоту.Вставить("offset", ИдентификаторПоследнегоСообщения + 1);

	Возврат ПараметрыПолученияСообщенийКБоту;

КонецФункции

Функция ПолученныеСообщенияВТаблицуЗначений(ПолученныеСообщения)

	ТаблицаСообщений = НоваяТаблицаПолученныхСообщений();

	Для Каждого ПолученноеСообщение Из ПолученныеСообщения Цикл

		Если Не ПолученноеСообщение.Свойство("message") Или Не ПолученноеСообщение.message.Свойство("text") Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицыСообщений = ТаблицаСообщений.Добавить();
		СтрокаТаблицыСообщений.ТекстСообщения = ПолученноеСообщение.message.text;
		СтрокаТаблицыСообщений.ИдентификаторЧата = Формат(ПолученноеСообщение.message.chat.id, "ЧГ=");
		СтрокаТаблицыСообщений.ИдентификаторСообщения = ПолученноеСообщение.update_id;

	КонецЦикла;

	Возврат ТаблицаСообщений;

КонецФункции

Функция НоваяТаблицаПолученныхСообщений()

	ТипСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ТипСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ТипЧисло15 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15));

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТекстСообщения", ТипСтрока100);
	Таблица.Колонки.Добавить("ИдентификаторЧата", ТипСтрока50);
	Таблица.Колонки.Добавить("ИдентификаторСообщения", ТипЧисло15);

	Возврат Таблица;

КонецФункции

Функция ИдентификаторПоследнегоОбработанногоСообщения(Бот)

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
						  |	TBM_ОбработанныеСообщенияБотовTelegram.ИдентификаторСообщения КАК ИдентификаторСообщения
						  |ИЗ
						  |	РегистрСведений.TBM_ОбработанныеСообщенияБотовTelegram КАК TBM_ОбработанныеСообщенияБотовTelegram
						  |ГДЕ
						  |	TBM_ОбработанныеСообщенияБотовTelegram.Бот = &Бот
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	ИдентификаторСообщения УБЫВ");
	Запрос.УстановитьПараметр("Бот", Бот);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторСообщения;
	КонецЕсли;

	Возврат 0;

КонецФункции

#КонецОбласти

#Область ОтправкаОтчетов

// Возвращает массив табличных документов по заданному действию.
// 
// Параметры:
//  Действие - СправочникСсылка.TBM_ДействияБотовTelegram - Действие
// 
// Возвращаемое значение:
//  Массив Из ТабличныйДокумент - Отчеты к 
Функция СформироватьОтчетыПоДействию(Действие)

	МассивОтчетов = Новый Массив;

	ВыборкаОтчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Отчеты").Выбрать();

	Пока ВыборкаОтчетов.Следующий() Цикл

		ПараметрыФормирования = ВариантыОтчетов.ПараметрыФормированияОтчета();
		ПараметрыФормирования.СсылкаВарианта = ВыборкаОтчетов.Отчет;

		Формирование = ВариантыОтчетов.СформироватьОтчет(ПараметрыФормирования, Истина, Истина);

		Если Формирование.Успех Тогда
			МассивОтчетов.Добавить(Формирование.ТабличныйДокумент);
		КонецЕсли;

	КонецЦикла;

	Возврат МассивОтчетов;

КонецФункции

Процедура ОтправитьОтчетыВЧаты(Бот, ВыборкаДействия)

	ОтчетыКОтправке = СформироватьОтчетыПоДействию(ВыборкаДействия.Действие);

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "sendDocument";
	ПараметрыHTTPЗапроса.Заголовки["Content-Type"] = СтрШаблон("multipart/form-data; boundary=%1",
		РазделительMultipartFormData());

	ВыборкаЧатов = ВыборкаДействия.Выбрать();

	НовыеЧаты = Новый Соответствие;

	Пока ВыборкаЧатов.Следующий() Цикл

		ИдентификаторЧата = ВыборкаЧатов.ИдентификаторЧата;

		Чат = ВыборкаЧатов.Чат;
		Если Не ЗначениеЗаполнено(Чат) Тогда
			Чат = НовыеЧаты[ИдентификаторЧата];
		КонецЕсли;

		Если Чат = Неопределено Тогда
			Чат = СоздатьНовыйЧатБота(Бот, ВыборкаЧатов);
			НовыеЧаты.Вставить(ИдентификаторЧата, Чат);
		КонецЕсли;

		Для Каждого ТабличныйДокумент Из ОтчетыКОтправке Цикл

			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");

			ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);

			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);

			ДвоичныеДанныеСообщения = ТелоВыгрузкиДокумента(ИдентификаторЧата, ДвоичныеДанные);
			Если ОтправитьДокументВЧат(Бот, ДвоичныеДанныеСообщения) Тогда
				СохранитьОбработанноеСообщение(Бот, Чат, ВыборкаЧатов);
			КонецЕсли;
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение

				ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Бот.Метаданные(), Бот, СтрШаблон(
					НСтр(
			"en = 'Error: %1'; ru = 'Ошибка: %1'; az = 'Səhv: %1'"), ПодробноеПредставлениеОшибки));

			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область МногоэтапныеДействия

Процедура ЗапуститьМногоэтапноеДействие(Бот, ВыборкаДействия)

	ВыборкаЧаты = ВыборкаДействия.Выбрать();

	Действие = ВыборкаДействия.Действие; // СправочникСсылка.TBM_ДействияБотовTelegram
	ЭтапыДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Этапы").Выбрать();

	Если Не ЭтапыДействия.Следующий() Тогда
		Возврат;
	КонецЕсли;

	СтартовыйЭтап = ЭтапыДействия.Этап; // СправочникСсылка.TBM_ДействияБотовTelegram
	ПроизвольныйКодСтартовогоЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтартовыйЭтап, "ПроизвольныйКод");

	ЭтапыДействия.Сбросить();

	НовыеЧаты = Новый Соответствие;

	Пока ВыборкаЧаты.Следующий() Цикл

		ИдентификаторЧата = ВыборкаЧаты.ИдентификаторЧата;

		Чат = ВыборкаЧаты.Чат;
		Если Не ЗначениеЗаполнено(Чат) Тогда
			Чат = НовыеЧаты[ИдентификаторЧата];
		КонецЕсли;

		Если Чат = Неопределено Тогда
			Чат = СоздатьНовыйЧатБота(Бот, ВыборкаЧаты);
			НовыеЧаты.Вставить(ИдентификаторЧата, Чат);
		КонецЕсли;

		РазговорОбъект = Справочники.TBM_ПоэтапныеДействияБотовTelegram.СоздатьЭлемент();
		РазговорОбъект.Бот = Бот;
		РазговорОбъект.Чат = Чат;
		РазговорОбъект.Действие = Действие;
		РазговорОбъект.Дата = ТекущаяДатаСеанса();
		Пока ЭтапыДействия.Следующий() Цикл
			СтрокаЭтапа = РазговорОбъект.Этапы.Добавить();
			СтрокаЭтапа.Этап = ЭтапыДействия.Этап;
		КонецЦикла;

		РазговорОбъект.Записать();

		ПараметровВыполненияЭтапа = НоваяСтруктураПараметровВыполненияЭтапа();
		ПараметровВыполненияЭтапа.Бот = Бот;
		ПараметровВыполненияЭтапа.Чат = Чат;
		ПараметровВыполненияЭтапа.ИдентификаторЧата = ВыборкаЧаты.ИдентификаторЧата;
		ПараметровВыполненияЭтапа.МногоэтапноеДействие = Действие;
		ПараметровВыполненияЭтапа.ТекущийЭтап = СтартовыйЭтап;
		ПараметровВыполненияЭтапа.Разговор = РазговорОбъект.Ссылка;

		ВыполнитьПроизвольныйКод(ПроизвольныйКодСтартовогоЭтапа, ПараметровВыполненияЭтапа);

	КонецЦикла;

КонецПроцедуры

Функция НоваяСтруктураПараметровВыполненияЭтапа()

	ПараметровВыполненияЭтапа = Новый Структура;
	ПараметровВыполненияЭтапа.Вставить("Бот", Справочники.TBM_БотыTelegram.ПустаяСсылка());
	ПараметровВыполненияЭтапа.Вставить("Чат", Справочники.TBM_ЧатыTelegram.ПустаяСсылка());
	ПараметровВыполненияЭтапа.Вставить("МногоэтапноеДействие", Справочники.TBM_ДействияБотовTelegram.ПустаяСсылка());
	ПараметровВыполненияЭтапа.Вставить("ТекущийЭтап", Справочники.TBM_ДействияБотовTelegram.ПустаяСсылка());
	ПараметровВыполненияЭтапа.Вставить("Разговор", Справочники.TBM_ПоэтапныеДействияБотовTelegram.ПустаяСсылка());

	Возврат ПараметровВыполненияЭтапа;

КонецФункции

// Завершает этап разговора.
// 
// Параметры:
//  Разговор - СправочникСсылка.TBM_ПоэтапныеДействияБотовTelegram - Разговор
//  Этап - СправочникСсылка.TBM_ДействияБотовTelegram - Этап
Процедура ЗавершитьЭтапРазговора(Разговор, Этап) Экспорт

	РазговорОбъект = Разговор.ПолучитьОбъект();

	СтруктураПоиска = Новый Структура("Этап, Заврешено", Этап, Ложь);
	НайденныеСтроки = РазговорОбъект.Этапы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаЭтапа = НайденныеСтроки[0];
	СтрокаЭтапа.Завершено = Истина;

	РазговорОбъект.Записать();

КонецПроцедуры

#КонецОбласти

#Область ВыполнениеПроизвольногоДействия

Процедура ВыполнитьДействиеИОтправитьСообщениеВЧат(Бот, ВыборкаДействия)

	ВыборкаЧатов = ВыборкаДействия.Выбрать();

	Действие = ВыборкаДействия.Действие; // СправочникСсылка.TBM_ДействияБотовTelegram
	ПроизвольныйКод = ВыборкаДействия.ПроизвольныйКод; // Строка

	НовыеЧаты = Новый Соответствие;

	Пока ВыборкаЧатов.Следующий() Цикл

		ИдентификаторЧата = ВыборкаЧатов.ИдентификаторЧата;

		Чат = ВыборкаЧатов.Чат;
		Если Не ЗначениеЗаполнено(Чат) Тогда
			Чат = НовыеЧаты[ИдентификаторЧата];
		КонецЕсли;

		Если Чат = Неопределено Тогда
			Чат = СоздатьНовыйЧатБота(Бот, ВыборкаЧатов);
			НовыеЧаты.Вставить(ИдентификаторЧата, Чат);
		КонецЕсли;

		ПараметрыВычисления = Новый Структура;
		ПараметрыВычисления.Вставить("Бот", Бот);
		ПараметрыВычисления.Вставить("Действие", Действие);
		ПараметрыВычисления.Вставить("Чат", Чат);
		ПараметрыВычисления.Вставить("ИдентификаторЧата", ИдентификаторЧата);

		Результат = НоваяСтруктураРезультатаПроизвольногоКода();
		ВыполнитьПроизвольныйКод(ПроизвольныйКод, ПараметрыВычисления, Результат);

		СообщениеОтправлено = Ложь;

		Если ЗначениеЗаполнено(Результат.ТекстСообщения) Тогда
			Сообщение = НоваяСтруктураСообщенияЧата();
			Сообщение.chat_id = ИдентификаторЧата;
			Сообщение.text = Результат.ТекстСообщения;
			Если ОтправитьСообщениеВЧат(Бот, Сообщение) Тогда
				СообщениеОтправлено = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(Результат.ДвоичныеДанныеДокумента) Тогда
			ДвоичныеДанныеСообщения = ТелоВыгрузкиДокумента(ИдентификаторЧата, Результат.ДвоичныеДанныеДокумента);
			Если ОтправитьДокументВЧат(Бот, ДвоичныеДанныеСообщения) Тогда
				СообщениеОтправлено = Истина;
			КонецЕсли;
		КонецЕсли;

		Если СообщениеОтправлено Тогда
			СохранитьОбработанноеСообщение(Бот, Чат, ВыборкаЧатов);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПроизвольныйКод(ПроизвольныйКод, Параметры, Результат = Неопределено)

	Попытка

		УстановитьБезопасныйРежим(Истина);

		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			МассивРазделителей = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
		Иначе
			МассивРазделителей = Новый Массив;
		КонецЕсли;

		Для Каждого ИмяРазделителя Из МассивРазделителей.РазделителиКонфигурации() Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;

		Выполнить (ПроизвольныйКод);

	Исключение

		ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Параметры.Бот.Метаданные(), Параметры.Бот,
			СтрШаблон(НСтр("en = 'Error: %1'; ru = 'Ошибка: %1'; az = 'Səhv: %1'"), ПодробноеПредставлениеОшибки));

	КонецПопытки;

КонецПроцедуры

Функция НоваяСтруктураРезультатаПроизвольногоКода() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("ДвоичныеДанныеДокумента", Неопределено);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОтправкаСообщенийВЧаты

Функция ОтправитьСообщениеВЧат(Бот, Сообщение)

	Результат = Истина;

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "sendMessage";
	ПараметрыHTTPЗапроса.ТелоЗапроса = TBM_РаботаСJSON.JSONИзЗначения(Сообщение);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);
	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция НоваяСтруктураСообщенияЧата()

	Сообщение = Новый Структура;
	Сообщение.Вставить("chat_id", "");
	Сообщение.Вставить("text", "");

	Возврат Сообщение;

КонецФункции

#КонецОбласти

#Область ОтправкаДокумента

Функция ОтправитьДокументВЧат(Бот, ДвоичныеДанныеСообщения)

	Результат = Истина;

	Разделитель = РазделительMultipartFormData();

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "sendDocument";
	ПараметрыHTTPЗапроса.Заголовки["Content-Type"] = СтрШаблон("multipart/form-data; boundary=%1", Разделитель);
	ПараметрыHTTPЗапроса.ТелоЗапросаДвоичныеДанные = ДвоичныеДанныеСообщения;

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);
	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ТелоВыгрузкиДокумента(ИдентификаторЧата, ДвоичныеДанные)

	Разделитель = РазделительMultipartFormData();

	ПотокВпамяти = Новый ПотокВПамяти;

	ЗаписьДанных = Новый ЗаписьДанных(ПотокВпамяти, , , Символы.ВК + Символы.ПС, "");
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""document""; filename=""document.pdf""");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: multipart/form-data");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.Записать(ДвоичныеДанные);
	ЗаписьДанных.ЗаписатьСтроку("");

	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""chat_id""");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку(ИдентификаторЧата);
	ЗаписьДанных.ЗаписатьСтроку("");

	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");

	ЗаписьДанных.Закрыть();

	Возврат ПотокВпамяти.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

Функция РазделительMultipartFormData()

	Возврат "WebKitFormBoundary7MA4YWxkTrZu0gW";

КонецФункции

#КонецОбласти

#Область Прочее

Функция СоздатьНовыйЧатБота(Бот, ДанныеЧата)

	ЧатОбъект = Справочники.TBM_ЧатыTelegram.СоздатьЭлемент();
	ЧатОбъект.Владелец = Бот;
	ЧатОбъект.Код = ДанныеЧата.ИдентификаторЧата;
	ЧатОбъект.Записать();

	Возврат ЧатОбъект.Ссылка;

КонецФункции

Процедура СохранитьОбработанноеСообщение(Бот, Чат, ДанныеСообщения)

	НоваяЗапись = РегистрыСведений.TBM_ОбработанныеСообщенияБотовTelegram.СоздатьМенеджерЗаписи();
	НоваяЗапись.ИдентификаторСообщения = ДанныеСообщения.ИдентификаторСообщения;
	НоваяЗапись.Бот = Бот;
	НоваяЗапись.Чат = Чат;
	НоваяЗапись.Дата = ТекущаяДатаСеанса();
	НоваяЗапись.ТекстСообщения = ДанныеСообщения.ТекстСообщения;
	НоваяЗапись.Записать();

КонецПроцедуры

Функция ИмяСобытияВзаимодействияСБотамиTelegram()

	Возврат НСтр("en = 'Telegram bots'; ru = 'Боты Telegram'; az = 'Telegram botları'",
		ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Функция НайтиБотаTelegramПоИмени(ИмяБота)

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	TBM_БотыTelegram.Ссылка КАК Бот
						  |ИЗ
						  |	Справочник.TBM_БотыTelegram КАК TBM_БотыTelegram
						  |ГДЕ
						  |	TBM_БотыTelegram.ВариантВзаимодействия = ЗНАЧЕНИЕ(Перечисление.TBM_ВариантыВзаимодействияСБотамиTelegram.РегламентноеЗадание)
						  |	И TBM_БотыTelegram.Код = &ИмяБота
						  |	И НЕ TBM_БотыTelegram.ПометкаУдаления");
	Запрос.УстановитьПараметр("ИмяБота", ИмяБота);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Бот;
	КонецЕсли;

	Возврат Справочники.TBM_БотыTelegram.ПустаяСсылка();

КонецФункции

#КонецОбласти

#КонецОбласти