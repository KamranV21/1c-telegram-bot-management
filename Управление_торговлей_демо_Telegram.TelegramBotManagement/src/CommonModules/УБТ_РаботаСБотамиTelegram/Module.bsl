#Область ПрограммныйИнтерфейс 

// Устанавливает вебхук бота.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
//  ПараметрыВебхука - см. УБТ_РаботаСБотамиTelegram.ПараметрыВебхука
// 
// Возвращаемое значение:
//  Булево - Установить вебхук
Функция УстановитьВебхук(Бот, ПараметрыВебхука) Экспорт

	Результат = Истина;

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "setWebhook";
	ПараметрыHTTPЗапроса.ТелоЗапроса = УБТ_РаботаСJSON.ЗначениеВJSON(ПараметрыВебхука);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Отключает вебхук бота.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
// 
// Возвращаемое значение:
//  Булево - Установить вебхук
Функция ОтключитьВебхук(Бот) Экспорт

	Результат = Истина;

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "deleteWebhook";

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает информацию о вебхуке бота.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Информация о вебхуке
Функция ИнформацияОВебхуке(Бот) Экспорт

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "getWebhookInfo";

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;

	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	ЗначениеОтвета = УБТ_РаботаСJSON.JSONВЗначение(ТелоОтвета, , Ложь);

	Возврат ЗначениеОтвета.result;

КонецФункции

// Отправляет сообщение в чат.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
//  Сообщение - Структура: см. НоваяСтруктураСообщенияЧата
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Информация о переданном сообщении
Функция ОтправитьСообщениеВЧат(Бот, Сообщение) Экспорт

	Если Не ЗначениеЗаполнено(Сообщение.reply_markup) Тогда
		Сообщение.reply_markup = СтруктураУдаленияКлавиатуры();
	КонецЕсли;

	Если ВРег(Сообщение.parse_mode) = "HTML" Тогда
		Сообщение.text = АдаптироватьHTMLТекстаСообщения(Сообщение.text);
	КонецЕсли;

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "sendMessage";
	ПараметрыHTTPЗапроса.ТелоЗапроса = УБТ_РаботаСJSON.ЗначениеВJSON(Сообщение);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;

	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	ЗначениеОтвета = УБТ_РаботаСJSON.JSONВЗначение(ТелоОтвета, , Ложь);

	Возврат ЗначениеОтвета;

КонецФункции

// Отправляет документ в чат.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
//  ДвоичныеДанныеСообщения - ДвоичныеДанные, Произвольный - Двоичные данные сообщения
// 
// Возвращаемое значение:
//  Булево - Результат передачи документа
Функция ОтправитьДокументВЧат(Бот, ДвоичныеДанныеСообщения) Экспорт

	Результат = Истина;

	Разделитель = РазделительMultipartFormData();

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "sendDocument";
	ПараметрыHTTPЗапроса.Заголовки["Content-Type"] = СтрШаблон("multipart/form-data; boundary=%1", Разделитель);
	ПараметрыHTTPЗапроса.ТелоЗапросаДвоичныеДанные = ДвоичныеДанныеСообщения;

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);
	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Отправляет группу медиафайлов в чат.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
//  ДвоичныеДанныеСообщения - ДвоичныеДанные, Произвольный - Двоичные данные сообщения
// 
// Возвращаемое значение:
//  Произвольный,Неопределено - Результат передачи группы медиафайлов
Функция ОтправитьГруппуМедиафайловВЧат(Бот, ДвоичныеДанныеСообщения) Экспорт

	Разделитель = РазделительMultipartFormData();

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "sendMediaGroup";
	ПараметрыHTTPЗапроса.Заголовки["Content-Type"] = СтрШаблон("multipart/form-data; boundary=%1", Разделитель);
	ПараметрыHTTPЗапроса.ТелоЗапросаДвоичныеДанные = ДвоичныеДанныеСообщения;

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;

	СообщениеОтвета = УБТ_РаботаСJSON.JSONВЗначение(HTTPОтвет.ПолучитьТелоКакСтроку(), , Ложь);

	Возврат СообщениеОтвета;

КонецФункции

// Обновляет клавиатуру ответа при общении с чатом.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram -Бот
//  СтруктураОбновленияКлавиатуры - Структура - Клавиатура ответа
// 
// Возвращаемое значение:
//  Булево - Результат изменения клавиатуры ответа
Функция ИзменитьКлавиатуруОтвета(Бот, СтруктураОбновленияКлавиатуры) Экспорт

	Результат = Истина;

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "editMessageReplyMarkup";
	ПараметрыHTTPЗапроса.ТелоЗапроса = УБТ_РаботаСJSON.ЗначениеВJSON(СтруктураОбновленияКлавиатуры);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Установливает список общедоступных команд бота.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
// 
// Возвращаемое значение:
//  Булево - Результат установки команд
Функция УстановитьОбщиеКомандыБота(Бот) Экспорт

	Результат = Истина;

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	УБТ_КомандыБотовTelegram.Команда,
						  |	УБТ_КомандыБотовTelegram.Описание
						  |ИЗ
						  |	РегистрСведений.УБТ_КомандыБотовTelegram КАК УБТ_КомандыБотовTelegram
						  |ГДЕ
						  |	УБТ_КомандыБотовTelegram.Бот = &Бот
						  |	И УБТ_КомандыБотовTelegram.Чат = ЗНАЧЕНИЕ(Справочник.УБТ_ЧатыTelegram.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Бот", Бот);

	Выборка = Запрос.Выполнить().Выбрать();

	КомандыБота = Новый Массив;
	Пока Выборка.Следующий() Цикл
		КомандаБота = НоваяСтруктураКомандаБота();
		КомандаБота.command = Выборка.Команда;
		КомандаБота.description = Выборка.Описание;
		КомандыБота.Добавить(КомандаБота);
	КонецЦикла;

	СтруктураУстановкиКомандБота = НоваяСтруктураУстановкиКомандБота();
	СтруктураУстановкиКомандБота.commands = КомандыБота;
	СтруктураУстановкиКомандБота.Удалить("scope");

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "setMyCommands";
	ПараметрыHTTPЗапроса.ТелоЗапроса = УБТ_РаботаСJSON.ЗначениеВJSON(СтруктураУстановкиКомандБота);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Удаляет все общедоступные команды бота.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
// 
// Возвращаемое значение:
//  Булево - Результат удаления команд
Функция УдалитьОбщиеКомандыБота(Бот) Экспорт

	Результат = Истина;

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "deleteMyCommands";

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Установливает список персоанльных команд чата.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
//  Чат - СправочникСсылка.УБТ_ЧатыTelegram - Чат
// 
// Возвращаемое значение:
//  Булево - Результат установки команд
Функция УстановитьПерсональныеКомандыЧата(Бот, Чат) Экспорт

	Результат = Истина;

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	УБТ_КомандыБотовTelegram.Команда,
						  |	УБТ_КомандыБотовTelegram.Описание
						  |ИЗ
						  |	РегистрСведений.УБТ_КомандыБотовTelegram КАК УБТ_КомандыБотовTelegram
						  |ГДЕ
						  |	УБТ_КомандыБотовTelegram.Бот = &Бот
						  |	И УБТ_КомандыБотовTelegram.Чат = &Чат");
	Запрос.УстановитьПараметр("Бот", Бот);
	Запрос.УстановитьПараметр("Чат", Чат);

	Выборка = Запрос.Выполнить().Выбрать();

	КомандыБота = Новый Массив;
	Пока Выборка.Следующий() Цикл
		КомандаБота = НоваяСтруктураКомандаБота();
		КомандаБота.command = Выборка.Команда;
		КомандаБота.description = Выборка.Описание;
		КомандыБота.Добавить(КомандаБота);
	КонецЦикла;

	СкопКоманд = НоваяСтруктураСкопКомандЧат();
	СкопКоманд.chat_id = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Чат, "Код");

	СтруктураУстановкиКомандБота = НоваяСтруктураУстановкиКомандБота();
	СтруктураУстановкиКомандБота.commands = КомандыБота;
	СтруктураУстановкиКомандБота.scope = СкопКоманд;

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "setMyCommands";
	ПараметрыHTTPЗапроса.ТелоЗапроса = УБТ_РаботаСJSON.ЗначениеВJSON(СтруктураУстановкиКомандБота);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Удаляет все персональные команды чата.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
//  Чат - СправочникСсылка.УБТ_ЧатыTelegram - Чат
// 
// Возвращаемое значение:
//  Булево - Результат удаления команд
Функция УдалитьПерсональныеКомандыЧата(Бот, Чат) Экспорт

	Результат = Истина;

	СкопКоманд = НоваяСтруктураСкопКомандЧат();
	СкопКоманд.chat_id = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Чат, "Код");

	СтруктураУстановкиКомандБота = НоваяСтруктураУстановкиКомандБота();
	СтруктураУстановкиКомандБота.scope = СкопКоманд;
	СтруктураУстановкиКомандБота.Удалить("commands");

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "deleteMyCommands";
	ПараметрыHTTPЗапроса.ТелоЗапроса = УБТ_РаботаСJSON.ЗначениеВJSON(СтруктураУстановкиКомандБота);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);

	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Результат = Ложь;
		Если HTTPОтвет <> Неопределено Тогда
			СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Загружает и обрабатывает все сообщения, полученные ботом.
//
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот Telegram.
//
Процедура ОбработатьПолученныеСообщенияБота(Бот) Экспорт

	ПолученныеСообщения = ПолученныеСообщенияБота(Бот);

	Если ПолученныеСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСообщений = ПолученныеСообщенияВТаблицуЗначений(ПолученныеСообщения);
	ОтветитьНаПолученныеСообщения(Бот, ТаблицаСообщений);

КонецПроцедуры

// Отвечает на полученные ботами сообщения.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
//  ТаблицаСообщений - ТаблицаЗначений: См. НоваяТаблицаПолученныхСообщений
Процедура ОтветитьНаПолученныеСообщения(Бот, ТаблицаСообщений) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ТаблицаСообщений.ТекстСообщения КАК ТекстСообщения,
						  |	ТаблицаСообщений.ИмяКонтакта КАК ИмяКонтакта,
						  |	ТаблицаСообщений.НомерТелефонаКонтакта КАК НомерТелефонаКонтакта,
						  |	ТаблицаСообщений.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ТаблицаСообщений.НаименованиеЧата КАК НаименованиеЧата,
						  |	ТаблицаСообщений.ТипЧата КАК ТипЧата,
						  |	ТаблицаСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения
						  |ПОМЕСТИТЬ ВтТаблицаСообщений
						  |ИЗ
						  |	&ТаблицаСообщений КАК ТаблицаСообщений
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВтТаблицаСообщений.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ВтТаблицаСообщений.НаименованиеЧата КАК НаименованиеЧата,
						  |	ВтТаблицаСообщений.ТипЧата КАК ТипЧата,
						  |	ВтТаблицаСообщений.ИмяКонтакта КАК ИмяКонтакта,
						  |	ВтТаблицаСообщений.НомерТелефонаКонтакта КАК НомерТелефонаКонтакта,
						  |	ВтТаблицаСообщений.ТекстСообщения КАК ТекстСообщения,
						  |	ВтТаблицаСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
						  |	ЕСТЬNULL(ПерсональныеКоманды.Сценарий, ЕСТЬNULL(ОбщиеКоманды.Сценарий,
						  |		ЗНАЧЕНИЕ(Справочник.УБТ_СценарииБотовTelegram.ПустаяСсылка))) КАК Сценарий
						  |ПОМЕСТИТЬ ВтСценарии
						  |ИЗ
						  |	ВтТаблицаСообщений КАК ВтТаблицаСообщений
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБТ_КомандыБотовTelegram КАК ПерсональныеКоманды
						  |		ПО (ПерсональныеКоманды.Бот = &Бот)
						  |		И ВтТаблицаСообщений.ТекстСообщения = ПерсональныеКоманды.Команда
						  |		И ВтТаблицаСообщений.ИдентификаторЧата = ПерсональныеКоманды.Чат.Код
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБТ_КомандыБотовTelegram КАК ОбщиеКоманды
						  |		ПО (ОбщиеКоманды.Бот = &Бот)
						  |		И ВтТаблицаСообщений.ТекстСообщения = ОбщиеКоманды.Команда
						  |		И (ОбщиеКоманды.Чат = ЗНАЧЕНИЕ(Справочник.УБТ_ЧатыTelegram.ПустаяСсылка))
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБТ_ОбработанныеСообщенияБотовTelegram КАК ОбработанныеСообщения
						  |		ПО ВтТаблицаСообщений.ИдентификаторСообщения = ОбработанныеСообщения.ИдентификаторСообщения
						  |		И ВтТаблицаСообщений.ИдентификаторЧата = ОбработанныеСообщения.Чат.Код
						  |		И (ОбработанныеСообщения.Бот = &Бот)
						  |ГДЕ
						  |	ОбработанныеСообщения.ИдентификаторСообщения ЕСТЬ NULL
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВтСценарии.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ВтСценарии.НаименованиеЧата КАК НаименованиеЧата,
						  |	ВтСценарии.ТипЧата КАК ТипЧата,
						  |	ВтСценарии.ТекстСообщения КАК ТекстСообщения,
						  |	ВтСценарии.ИмяКонтакта КАК ИмяКонтакта,
						  |	ВтСценарии.НомерТелефонаКонтакта КАК НомерТелефонаКонтакта,
						  |	ВтСценарии.ИдентификаторСообщения КАК ИдентификаторСообщения,
						  |	ЕСТЬNULL(ЧатыTelegram.Ссылка, ЗНАЧЕНИЕ(Справочник.УБТ_ЧатыTelegram.ПустаяСсылка)) КАК Чат,
						  |	ВтСценарии.Сценарий КАК Сценарий
						  |ПОМЕСТИТЬ ВтСценарииЧаты
						  |ИЗ
						  |	ВтСценарии КАК ВтСценарии
						  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБТ_ЧатыTelegram КАК ЧатыTelegram
						  |		ПО ВтСценарии.ИдентификаторЧата = ЧатыTelegram.Код
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВтСценарииЧаты.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ВтСценарииЧаты.НаименованиеЧата КАК НаименованиеЧата,
						  |	ВтСценарииЧаты.ТипЧата КАК ТипЧата,
						  |	ВтСценарииЧаты.ТекстСообщения КАК ТекстСообщения,
						  |	ВтСценарииЧаты.ИмяКонтакта КАК ИмяКонтакта,
						  |	ВтСценарииЧаты.НомерТелефонаКонтакта КАК НомерТелефонаКонтакта,
						  |	ВтСценарииЧаты.ИдентификаторСообщения КАК ИдентификаторСообщения,
						  |	ВтСценарииЧаты.Чат КАК Чат,
						  |	ВЫБОР
						  |		КОГДА ВтСценарииЧаты.Сценарий.ТребуетсяАвторизация
						  |		И УБТ_АвторизованныеСценарииЧатовTelegram.Чат ЕСТЬ NULL
						  |			ТОГДА &СценарийАвторизацииЧата
						  |		ИНАЧЕ ВтСценарииЧаты.Сценарий
						  |	КОНЕЦ КАК Сценарий,
						  |	ВтСценарииЧаты.Сценарий КАК ЗапрошенныйСценарий
						  |ПОМЕСТИТЬ ВтАвторизованныеЧаты
						  |ИЗ
						  |	ВтСценарииЧаты КАК ВтСценарииЧаты
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УБТ_АвторизованныеСценарииЧатовTelegram КАК УБТ_АвторизованныеСценарииЧатовTelegram
						  |		ПО (УБТ_АвторизованныеСценарииЧатовTelegram.Бот = &Бот)
						  |		И (ВтСценарииЧаты.Чат = УБТ_АвторизованныеСценарииЧатовTelegram.Чат)
						  |		И (ВтСценарииЧаты.Сценарий = УБТ_АвторизованныеСценарииЧатовTelegram.Сценарий)
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВтАвторизованныеЧаты.ИдентификаторЧата КАК ИдентификаторЧата,
						  |	ВтАвторизованныеЧаты.НаименованиеЧата КАК НаименованиеЧата,
						  |	ВтАвторизованныеЧаты.ТипЧата КАК ТипЧата,
						  |	ВтАвторизованныеЧаты.ТекстСообщения КАК ТекстСообщения,
						  |	ВтАвторизованныеЧаты.ИмяКонтакта КАК ИмяКонтакта,
						  |	ВтАвторизованныеЧаты.НомерТелефонаКонтакта КАК НомерТелефонаКонтакта,
						  |	ВтАвторизованныеЧаты.ИдентификаторСообщения КАК ИдентификаторСообщения,
						  |	ВтАвторизованныеЧаты.Чат КАК Чат,
						  |	ВтАвторизованныеЧаты.Сценарий КАК Сценарий,
						  |	ВтАвторизованныеЧаты.Сценарий.ТипСценария КАК ТипСценария,
						  |	ВтАвторизованныеЧаты.Сценарий.ПроизвольныйКод КАК ПроизвольныйКод,
						  | ВтАвторизованныеЧаты.Сценарий.ИндивидуальноеИсполнениеСценария КАК ИндивидуальноеИсполнениеСценария,
						  |	ВтАвторизованныеЧаты.ЗапрошенныйСценарий КАК ЗапрошенныйСценарий
						  |ИЗ
						  |	ВтАвторизованныеЧаты КАК ВтАвторизованныеЧаты
						  |ИТОГИ
						  |ПО
						  |	Сценарий
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ЭтапыТекущегоОбщения.Ссылка КАК Общение,
						  |	ЭтапыТекущегоОбщения.Ссылка.Чат КАК Чат,
						  |	ЭтапыТекущегоОбщения.Ссылка.Сценарий КАК Сценарий,
						  |	ЭтапыТекущегоОбщения.НаименованиеЭтапа КАК НаименованиеЭтапа,
						  |	ЭтапыТекущегоОбщения.УникальныйИдентификатор КАК УникальныйИдентификатор,
						  |	ЭтапыСценария.ПроизвольныйКод КАК ПроизвольныйКод
						  |ИЗ
						  |	Справочник.УБТ_ОбщенияБотовTelegramСЧатами.Этапы КАК ЭтапыТекущегоОбщения
						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УБТ_СценарииБотовTelegram.Этапы КАК ЭтапыСценария
						  |		ПО ЭтапыТекущегоОбщения.Ссылка.Сценарий = ЭтапыСценария.Ссылка
						  |		И ЭтапыТекущегоОбщения.УникальныйИдентификатор = ЭтапыСценария.УникальныйИдентификатор
						  |ГДЕ
						  |	ЭтапыТекущегоОбщения.Ссылка.Бот = &Бот
						  |	И ЭтапыТекущегоОбщения.Ссылка.Чат В
						  |		(ВЫБРАТЬ
						  |			Т.Чат
						  |		ИЗ
						  |			ВтСценарииЧаты КАК Т)
						  |	И НЕ ЭтапыТекущегоОбщения.Ссылка.Завершено
						  |	И НЕ ЭтапыТекущегоОбщения.Завершено
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	ЭтапыТекущегоОбщения.НомерСтроки");
	Запрос.УстановитьПараметр("ТаблицаСообщений", ТаблицаСообщений);
	Запрос.УстановитьПараметр("Бот", Бот);
	Запрос.УстановитьПараметр("СценарийАвторизацииЧата",
		Справочники.УБТ_СценарииБотовTelegram.СценарийАвторизацииЧатов());

	МассивРезультатов = Запрос.ВыполнитьПакет();

	ТекущиеОбщенияСЧатами = МассивРезультатов[МассивРезультатов.Количество() - 1].Выбрать();
	РезультатСценарии = МассивРезультатов[МассивРезультатов.Количество() - 2];

	ВыборкаСценарии = РезультатСценарии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ЗавершитьНеоконченныеОбщенияСЧатами(ВыборкаСценарии, ТекущиеОбщенияСЧатами);

	НовыеЧаты = Новый Соответствие;

	Пока ВыборкаСценарии.Следующий() Цикл

		Если ВыборкаСценарии.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.ОтправкаОтчета Тогда

			ОтправитьОтчетыВЧаты(Бот, ВыборкаСценарии, НовыеЧаты);

		ИначеЕсли ВыборкаСценарии.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.Общение Тогда

			ЗапуститьОбщениеСЧатом(Бот, ВыборкаСценарии, НовыеЧаты);

		ИначеЕсли ВыборкаСценарии.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.ПроизвольныйСценарий Тогда

			ВыполнитьСценарийИОтправитьСообщениеВЧат(Бот, ВыборкаСценарии, НовыеЧаты);

		Иначе

			ВыборкаЧаты = ВыборкаСценарии.Выбрать();
			Пока ВыборкаЧаты.Следующий() Цикл

				Чат = ВыборкаЧаты.Чат;
				Если Не ЗначениеЗаполнено(Чат) Тогда
					Чат = НовыеЧаты[ВыборкаЧаты.ИдентификаторЧата];
				КонецЕсли;

				Если Чат = Неопределено Тогда
					Чат = СоздатьНовыйЧатБота(Бот, ВыборкаЧаты);
					НовыеЧаты.Вставить(ВыборкаЧаты.ИдентификаторЧата, Чат);
				КонецЕсли;

				ТекущиеОбщенияСЧатами.Сбросить();
				СтруктураПоиска = Новый Структура("Чат", ВыборкаЧаты.Чат);

				Если ТекущиеОбщенияСЧатами.НайтиСледующий(СтруктураПоиска) Тогда
					ПродолжитьОбщениеСЧатом(ВыборкаЧаты, ТекущиеОбщенияСЧатами);
				Иначе
					Если ВыборкаЧаты.ТипЧата = Перечисления.УБТ_ТипыЧатовTelegram.Приватный Тогда
						СообщитьОНеизвестнойКоманде(Бот, Чат, ВыборкаЧаты);
					КонецЕсли;
					СохранитьОбработанноеСообщение(Бот, Чат, ВыборкаЧаты);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает токен бота Telegram.
// 
// Параметры:
//  Бот - СправочникСсылка.УБТ_БотыTelegram - Бот
// 
// Возвращаемое значение:
//  Строка - Токен бота Telegram
Функция ТокенБотаTelegram(Бот) Экспорт

	ИдентификаторБота = Справочники.УБТ_БотыTelegram.ИдентификаторЭлементаБотаСПрефиксом(Бот);

	УстановитьПривилегированныйРежим(Истина);
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторБота);
	УстановитьПривилегированныйРежим(Ложь);

	Если ТипЗнч(Токен) = Тип("Строка") Тогда
		Возврат Токен;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПараметрыВебхука() Экспорт

	ПараметрыВебхука = Новый Структура;
	ПараметрыВебхука.Вставить("url", "");
	ПараметрыВебхука.Вставить("secret_token", "");

	Возврат ПараметрыВебхука;

КонецФункции

// Тело выгрузки документа.
// 
// Параметры:
//  Сообщение - Структура: см. НоваяСтруктураСообщенияСДокументом
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Тело выгрузки документа
Функция ТелоВыгрузкиДокумента(Сообщение) Экспорт

	Разделитель = РазделительMultipartFormData();

	ПотокВпамяти = Новый ПотокВПамяти;

	ЗаписьДанных = Новый ЗаписьДанных(ПотокВпамяти, , , Символы.ВК + Символы.ПС, "");
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""document""; filename=""" + Сообщение.filename
		+ """");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: multipart/form-data");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.Записать(Сообщение.binary);
	ЗаписьДанных.ЗаписатьСтроку("");

	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""chat_id""");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку(Сообщение.chat_id);
	ЗаписьДанных.ЗаписатьСтроку("");

	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""caption""");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку(Сообщение.caption);
	ЗаписьДанных.ЗаписатьСтроку("");

	Если ЗначениеЗаполнено(Сообщение.parse_mode) Тогда
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""parse_mode""");
		ЗаписьДанных.ЗаписатьСтроку("");
		ЗаписьДанных.ЗаписатьСтроку(Сообщение.parse_mode);
		ЗаписьДанных.ЗаписатьСтроку("");
	КонецЕсли;

	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");

	ЗаписьДанных.Закрыть();

	Возврат ПотокВпамяти.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

// Тело выгрузки документа.
// 
// Параметры:
//  Сообщение - Структура: см. НоваяСтруктураСообщенияМедиафайлов
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Тело выгрузки документа
Функция ТелоВыгрузкиГруппыМедиафайлов(Сообщение) Экспорт

	Разделитель = РазделительMultipartFormData();

	ПотокВпамяти = Новый ПотокВПамяти;

	ЗаписьДанных = Новый ЗаписьДанных(ПотокВпамяти, , , Символы.ВК + Символы.ПС, "");

	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""chat_id""");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку(Сообщение.chat_id);
	ЗаписьДанных.ЗаписатьСтроку("");

	ДанныеМедиафайлов = Новый Массив;

	Индекс = 0;
	Для Каждого Медиа Из Сообщение.media Цикл

		ИмяФайла = "mediafile_" + Формат(Индекс, "ЧН=0; ЧГ=;");

		Если Не ЗначениеЗаполнено(Медиа.fileId) Тогда
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
			ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + ИмяФайла + """; filename="""
				+ Медиа.filename + """");
			ЗаписьДанных.ЗаписатьСтроку("Content-Type: multipart/form-data");
			ЗаписьДанных.ЗаписатьСтроку("");
			ЗаписьДанных.Записать(Медиа.binary);
			ЗаписьДанных.ЗаписатьСтроку("");
		КонецЕсли;

		ДанныеМедиафайла = Новый Структура;
		ДанныеМедиафайла.Вставить("type", Медиа.type);

		Если ЗначениеЗаполнено(Медиа.fileId) Тогда
			ДанныеМедиафайла.Вставить("media", Медиа.fileId);
		Иначе
			ДанныеМедиафайла.Вставить("media", "attach://" + ИмяФайла);
		КонецЕсли;

		ДанныеМедиафайла.Вставить("caption", АдаптироватьHTMLТекстаСообщения(Медиа.caption));

		Если ЗначениеЗаполнено(Медиа.parse_mode) Тогда
			ДанныеМедиафайла.Вставить("parse_mode", Медиа.parse_mode);
		КонецЕсли;

		ДанныеМедиафайлов.Добавить(ДанныеМедиафайла);

		Индекс = Индекс + 1;

	КонецЦикла;

	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""media""");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку(УБТ_РаботаСJSON.ЗначениеВJSON(ДанныеМедиафайлов));
	ЗаписьДанных.ЗаписатьСтроку("");

	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");

	ЗаписьДанных.Закрыть();

	Возврат ПотокВпамяти.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

Функция ПолученныеСообщенияВТаблицуЗначений(ПолученныеСообщения) Экспорт

	ТаблицаСообщений = НоваяТаблицаПолученныхСообщений();

	Для Каждого ПолученноеСообщение Из ПолученныеСообщения Цикл

		Если Не ПолученноеСообщение.Свойство("message") Тогда
			Продолжить;
		КонецЕсли;

		ДанныеЧата = ПолученноеСообщение.message.chat;

		СтрокаТаблицыСообщений = ТаблицаСообщений.Добавить();
		СтрокаТаблицыСообщений.ИдентификаторЧата = Формат(ДанныеЧата.id, "ЧГ=");
		СтрокаТаблицыСообщений.ТипЧата = Перечисления.УБТ_ТипыЧатовTelegram.ЗначениеИзПредставления(
			ДанныеЧата.type);
		СтрокаТаблицыСообщений.ИдентификаторСообщения = ПолученноеСообщение.update_id;

		НаименованиеЧата = "";
		Если ДанныеЧата.Свойство("title") Тогда
			НаименованиеЧата = ДанныеЧата.title;
		Иначе
			Если ДанныеЧата.Свойство("first_name") Тогда
				НаименованиеЧата = ДанныеЧата.first_name;
			КонецЕсли;
			Если ДанныеЧата.Свойство("last_name") Тогда
				НаименованиеЧата = НаименованиеЧата + ?(ЗначениеЗаполнено(НаименованиеЧата), " ", "")
					+ ДанныеЧата.last_name;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НаименованиеЧата) И ДанныеЧата.Свойство("username") Тогда
				НаименованиеЧата = ДанныеЧата.username;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицыСообщений.НаименованиеЧата = НаименованиеЧата;

		Если ПолученноеСообщение.message.Свойство("text") Тогда
			СтрокаТаблицыСообщений.ТекстСообщения = ПолученноеСообщение.message.text;
		КонецЕсли;

		СвойстваСообщения = Неопределено;
		ПолученноеСообщение.message.Свойство("entities", СвойстваСообщения);

		ЭтоКомандаБота = ТипЗнч(СвойстваСообщения) = Тип("Массив") И СвойстваСообщения.Количество() = 1
			И СвойстваСообщения[0].type = "bot_command";

		СимволРазделения = "@";
		Если ЭтоКомандаБота И СтрНайти(СтрокаТаблицыСообщений.ТекстСообщения, СимволРазделения) Тогда
			СоставныеКоманды = СтрРазделить(СтрокаТаблицыСообщений.ТекстСообщения, СимволРазделения);
			СтрокаТаблицыСообщений.ТекстСообщения = СоставныеКоманды[0];
		КонецЕсли;

		Если ПолученноеСообщение.message.Свойство("contact") Тогда
			СтрокаТаблицыСообщений.ИмяКонтакта = ПолученноеСообщение.message.contact.first_name;
			СтрокаТаблицыСообщений.НомерТелефонаКонтакта = ПолученноеСообщение.message.contact.phone_number;
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаСообщений;

КонецФункции

// Новая структура результата произвольного кода.
// 
// Возвращаемое значение:
//  Структура - Новая структура результата произвольного кода:
// * Сообщение - Структура: См. НоваяСтруктураСообщенияОтвета 
// * Файлы - Массив Из Структура: См. НоваяСтруктураФайлаСообщенияОтвета 
Функция НоваяСтруктураРезультатаПроизвольногоКода() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Сообщение", НоваяСтруктураСообщенияОтвета());
	Результат.Вставить("Файлы", Новый Массив);

	Возврат Результат;

КонецФункции

// Сообщение ответа.
// 
// Возвращаемое значение:
//  Структура - Новая структура сообщения ответа:
// * Текст - Строка
Функция НоваяСтруктураСообщенияОтвета() Экспорт

	СообщениеОтвета = Новый Структура;
	СообщениеОтвета.Вставить("Текст", "");

	Возврат СообщениеОтвета;

КонецФункции

// Файла ответа.
// 
// Возвращаемое значение:
//  Структура - Новая структура файла сообщения ответа:
// * ДвоичныеДанные - Неопределено, ДвоичныеДанные - Двоичные данные файла
// * НаименованиеСРасширением - Строка - Полное наименование файла. Например, document.pdf
Функция НоваяСтруктураФайлаСообщенияОтвета() Экспорт

	СообщениеОтвета = Новый Структура;
	СообщениеОтвета.Вставить("ДвоичныеДанные", Неопределено);
	СообщениеОтвета.Вставить("НаименованиеСРасширением", "");

	Возврат СообщениеОтвета;

КонецФункции

// Структура сообщения чата.
// 
// Возвращаемое значение:
//  Структура:
// * chat_id - Строка
// * text - Строка
// * parse_mode - Строка
// * reply_markup - Неопределено,Структура: см. НоваяКлавиатураПредоределенногоОтвета,Структура:см. СтруктураУдаленияКлавиатуры
Функция НоваяСтруктураСообщенияЧата() Экспорт

	Сообщение = Новый Структура;
	Сообщение.Вставить("chat_id", "");
	Сообщение.Вставить("text", "");
	Сообщение.Вставить("parse_mode", "");
	Сообщение.Вставить("reply_markup", Неопределено);

	Возврат Сообщение;

КонецФункции

// Структура сообщения с документа.
// 
// Возвращаемое значение:
//  Структура:
// * chat_id - Строка
// * binary - ДвоичныеДанные,Неопределено
// * filename - Строка
// * caption - Строка
// * parse_mode - Строка,Неопределено
Функция НоваяСтруктураСообщенияСДокументом() Экспорт

	Сообщение = Новый Структура;
	Сообщение.Вставить("chat_id", "");
	Сообщение.Вставить("binary", Неопределено);
	Сообщение.Вставить("filename", "");
	Сообщение.Вставить("caption", "");
	Сообщение.Вставить("parse_mode", Неопределено);

	Возврат Сообщение;

КонецФункции

// Структура сообщения с группой медиафайлов.
// 
// Возвращаемое значение:
//  Структура:
// * chat_id - Строка
// * media - Массив Из Структура: см. НоваяСтруктураМедиа
Функция НоваяСтруктураСообщенияМедиафайлов() Экспорт

	Сообщение = Новый Структура;
	Сообщение.Вставить("chat_id", "");
	Сообщение.Вставить("media", Новый Массив);

	Возврат Сообщение;

КонецФункции

Функция НоваяСтруктураМедиа() Экспорт

	Медиа = Новый Структура;
	Медиа.Вставить("type", "");
	Медиа.Вставить("binary", Неопределено);
	Медиа.Вставить("fileId", "");
	Медиа.Вставить("filename", "");
	Медиа.Вставить("caption", "");
	Медиа.Вставить("parse_mode", "");

	Возврат Медиа;

КонецФункции

// Новая клавиатура предоределенного ответа.
// 
// Возвращаемое значение:
//  Структура - Новая клавиатура предоределенного ответа:
// * keyboard - Массив Из Массив Из См. НоваяКнопкаКлавиатуры  
// * resize_keyboard - Булево
// * one_time_keyboard - Булево
Функция НоваяКлавиатураПредоределенногоОтвета() Экспорт

	КлавиатураОтвета = Новый Структура;

	КлавиатураОтвета.Вставить("keyboard", Новый Массив);
	КлавиатураОтвета.Вставить("resize_keyboard", Истина);
	КлавиатураОтвета.Вставить("one_time_keyboard", Истина);

	Возврат КлавиатураОтвета;

КонецФункции

Функция НоваяКнопкаКлавиатуры() Экспорт

	КнопкаКлавиатуры = Новый Структура;

	КнопкаКлавиатуры.Вставить("text", "");
	КнопкаКлавиатуры.Вставить("request_contact", Ложь);

	Возврат КнопкаКлавиатуры;

КонецФункции

Функция НоваяВстроеннаяКлавиатураПредоределенногоОтвета() Экспорт

	КлавиатураОтвета = Новый Структура;

	КлавиатураОтвета.Вставить("inline_keyboard", Новый Массив);

	Возврат КлавиатураОтвета;

КонецФункции

Функция НоваяВстроеннаяКнопкаКлавиатуры() Экспорт

	ВстроеннаяКнопкаКлавиатуры = Новый Структура;

	ВстроеннаяКнопкаКлавиатуры.Вставить("text", "");
	ВстроеннаяКнопкаКлавиатуры.Вставить("callback_data", "");

	Возврат ВстроеннаяКнопкаКлавиатуры;

КонецФункции

Функция СтруктураУдаленияКлавиатуры() Экспорт

	Возврат Новый Структура("remove_keyboard", Истина);

КонецФункции

// Структура обновления клавиатуры чата.
// 
// Возвращаемое значение:
//  Структура:
// * chat_id - Строка
// * message_id - Число
// * reply_markup - Неопределено,Структура: см. НоваяКлавиатураПредоределенногоОтвета,Структура:см. СтруктураУдаленияКлавиатуры
Функция НоваяСтруктураОбновленияКлавиатурыЧата() Экспорт

	СтруктураОбновленияКлавиатуры = Новый Структура;
	СтруктураОбновленияКлавиатуры.Вставить("chat_id", "");
	СтруктураОбновленияКлавиатуры.Вставить("message_id", 0);
	СтруктураОбновленияКлавиатуры.Вставить("reply_markup", Неопределено);

	Возврат СтруктураОбновленияКлавиатуры;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область HTTPЗапросы

Функция ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса)

	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();

	HTTPСоединение = Новый HTTPСоединение(ПараметрыHTTPЗапроса.БазовыйURL, , , , , ПараметрыHTTPЗапроса.Таймаут,
		ЗащищенноеСоединение);

	АдресРесурса = "/bot" + ПараметрыHTTPЗапроса.Токен + "/" + ПараметрыHTTPЗапроса.ИмяМетода;

	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ПараметрыHTTPЗапроса.Заголовки);

	Если ЗначениеЗаполнено(ПараметрыHTTPЗапроса.ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыHTTPЗапроса.ТелоЗапроса);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыHTTPЗапроса.ТелоЗапросаДвоичныеДанные) Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыHTTPЗапроса.ТелоЗапросаДвоичныеДанные);
	КонецЕсли;

	Попытка

		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ПараметрыHTTPЗапроса.HTTPМетод, HTTPЗапрос);
		Возврат HTTPОтвет;

	Исключение

		ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

		ТекстОшибки = НСтр(
			"az = 'Telegram API ilə əlaqə qurarkən səhv. Ətraflı məlumat üçün qeydiyyat jurnalına baxın.';en = 'An error occurred when accessing the Telegram API. See the registration log for details.';ru = 'Произошла ошибка при обращении к API Telegram. Подробности смотрите в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ПараметрыHTTPЗапроса.Бот.Метаданные(),
			ПараметрыHTTPЗапроса.Бот, СтрШаблон(НСтр("en = 'Error: %1'; ru = 'Ошибка: %1'; az = 'Səhv: %1'"),
			ПодробноеПредставлениеОшибки));

		Возврат Неопределено;

	КонецПопытки;

КонецФункции

Функция НоваяСтруктураПараметровHTTPЗапроса()

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	Структура = Новый Структура;
	Структура.Вставить("Бот", Справочники.УБТ_БотыTelegram.ПустаяСсылка());
	Структура.Вставить("БазовыйURL", "api.telegram.org");
	Структура.Вставить("Токен", "");
	Структура.Вставить("ИмяМетода", "");
	Структура.Вставить("HTTPМетод", "POST");
	Структура.Вставить("Заголовки", Заголовки);
	Структура.Вставить("Таймаут", 30);
	Структура.Вставить("ТелоЗапроса", "");
	Структура.Вставить("ТелоЗапросаДвоичныеДанные", Неопределено);

	Возврат Структура;

КонецФункции

Процедура СохранитьHTTPОтветОшибкиВЖурналеРегистрации(HTTPОтвет, ПараметрыHTTPЗапроса)

	ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();

	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ПараметрыHTTPЗапроса.Бот.Метаданные(),
			ПараметрыHTTPЗапроса.Бот, СтрШаблон(НСтр(
					"en = 'Error: %1'; ru = 'Ошибка: %1'; az = 'Səhv: %1'"), ТелоОтвета));
	КонецЕсли;

	ЗначениеОтвета = УБТ_РаботаСJSON.JSONВЗначение(ТелоОтвета, , Ложь);
	Если ЗначениеОтвета.Свойство("description") Тогда
		ОбщегоНазначения.СообщитьПользователю(ЗначениеОтвета.description);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Команды

Функция НоваяСтруктураУстановкиКомандБота()

	СтруктураУстановкиКомандБота = Новый Структура;
	СтруктураУстановкиКомандБота.Вставить("commands", Новый Массив);
	СтруктураУстановкиКомандБота.Вставить("scope", Неопределено);

	Возврат СтруктураУстановкиКомандБота;

КонецФункции

Функция НоваяСтруктураКомандаБота()

	КомандаБота = Новый Структура;
	КомандаБота.Вставить("command", "");
	КомандаБота.Вставить("description", "");

	Возврат КомандаБота;

КонецФункции

Функция НоваяСтруктураСкопКомандЧат()

	СкопКоманд = Новый Структура;
	СкопКоманд.Вставить("type", "chat");
	СкопКоманд.Вставить("chat_id", "");

	Возврат СкопКоманд;

КонецФункции

#КонецОбласти

#Область ОбработкаПолученныхСообщений

Процедура ЗавершитьНеоконченныеОбщенияСЧатами(ВыборкаСценарии, ТекущиеОбщенияСЧатами)

	Пока ВыборкаСценарии.Следующий() Цикл

		ВыборкаЧаты = ВыборкаСценарии.Выбрать();

		Пока ВыборкаЧаты.Следующий() Цикл

			СтруктураПоиска = Новый Структура("Чат", ВыборкаЧаты.Чат);
			ТекущиеОбщенияСЧатами.Сбросить();
			ТекущиеОбщенияСЧатами.НайтиСледующий(СтруктураПоиска);
			ТекущееОбщениеСЧатом = ТекущиеОбщенияСЧатами.Общение;

			Если ЗначениеЗаполнено(ТекущееОбщениеСЧатом) И ЗначениеЗаполнено(ВыборкаСценарии.ТипСценария) Тогда
				ЗавершитьНеоконченноеОбщениеСЧатом(ТекущееОбщениеСЧатом);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	ВыборкаСценарии.Сбросить();
	ТекущиеОбщенияСЧатами.Сбросить();

КонецПроцедуры

Функция ПолученныеСообщенияБота(Бот)

	ПараметрыПолученияСообщенийКБоту = ПараметрыПолученияСообщенийКБоту(Бот);

	ПараметрыHTTPЗапроса = НоваяСтруктураПараметровHTTPЗапроса();
	ПараметрыHTTPЗапроса.Бот = Бот;
	ПараметрыHTTPЗапроса.Токен = ТокенБотаTelegram(Бот);
	ПараметрыHTTPЗапроса.ИмяМетода = "getUpdates";
	ПараметрыHTTPЗапроса.ТелоЗапроса = УБТ_РаботаСJSON.ЗначениеВJSON(ПараметрыПолученияСообщенийКБоту);

	HTTPОтвет = ВыполнитьHTTPЗапросКБоту(ПараметрыHTTPЗапроса);
	Если HTTPОтвет = Неопределено Или HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Ответ = УБТ_РаботаСJSON.JSONВЗначение(HTTPОтвет.ПолучитьТелоКакСтроку(), , Ложь);

	Возврат Ответ.result;

КонецФункции

Функция ПараметрыПолученияСообщенийКБоту(Бот)

	ИдентификаторПоследнегоСообщения = ИдентификаторПоследнегоОбработанногоСообщения(Бот);

	ПараметрыПолученияСообщенийКБоту = Новый Структура;
	ПараметрыПолученияСообщенийКБоту.Вставить("offset", ИдентификаторПоследнегоСообщения + 1);

	Возврат ПараметрыПолученияСообщенийКБоту;

КонецФункции

Функция НоваяТаблицаПолученныхСообщений()

	ТипСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ТипСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ТипЧисло15 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15));

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТекстСообщения", ТипСтрока100);
	Таблица.Колонки.Добавить("ИмяКонтакта", ТипСтрока100);
	Таблица.Колонки.Добавить("НомерТелефонаКонтакта", ТипСтрока100);
	Таблица.Колонки.Добавить("ИдентификаторЧата", ТипСтрока50);
	Таблица.Колонки.Добавить("НаименованиеЧата", ТипСтрока100);
	Таблица.Колонки.Добавить("ТипЧата", Новый ОписаниеТипов("ПеречислениеСсылка.УБТ_ТипыЧатовTelegram"));
	Таблица.Колонки.Добавить("ИдентификаторСообщения", ТипЧисло15);

	Возврат Таблица;

КонецФункции

Функция ИдентификаторПоследнегоОбработанногоСообщения(Бот)

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
						  |	УБТ_ОбработанныеСообщенияБотовTelegram.ИдентификаторСообщения КАК ИдентификаторСообщения
						  |ИЗ
						  |	РегистрСведений.УБТ_ОбработанныеСообщенияБотовTelegram КАК УБТ_ОбработанныеСообщенияБотовTelegram
						  |ГДЕ
						  |	УБТ_ОбработанныеСообщенияБотовTelegram.Бот = &Бот
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	ИдентификаторСообщения УБЫВ");
	Запрос.УстановитьПараметр("Бот", Бот);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторСообщения;
	КонецЕсли;

	Возврат 0;

КонецФункции

#КонецОбласти

#Область ОтправкаОтчетов

// Возвращает массив табличных документов по заданному сценарию.
// 
// Параметры:
//  Сценарий - СправочникСсылка.УБТ_СценарииБотовTelegram - Сценарий
// 
// Возвращаемое значение:
//  Массив Из Структура:
//   * ТабличныйДокумент - ТабличныйДокумент
//   * НаименованиеФайла - Строка
//   * Расширения - Массив Из Строка
Функция СформироватьОтчетыПоСценарию(Сценарий)

	МассивОтчетов = Новый Массив;

	ВыборкаОтчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Отчеты").Выбрать();
	РасширенияОтчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "РасширенияОтчетов").Выбрать();

	Пока ВыборкаОтчетов.Следующий() Цикл

		ПараметрыФормирования = ПараметрыФормированияОтчета();
		ПараметрыФормирования.СсылкаВарианта = ВыборкаОтчетов.Отчет;

		ПараметрыОтчета = Новый Структура("Отчет, Настройки", ВыборкаОтчетов.Отчет, Неопределено);
		ПараметрыЖурнала = Новый Структура;
		ПараметрыЖурнала.Вставить("ИмяСобытия", ИмяСобытияВзаимодействияСБотамиTelegram());
		ПараметрыЖурнала.Вставить("Данные", Сценарий);
		ПараметрыЖурнала.Вставить("Метаданные", Метаданные.Справочники.УБТ_СценарииБотовTelegram);
		ПараметрыЖурнала.Вставить("МассивОшибок", Новый Массив);

		РассылкаОтчетов.ИнициализироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, Ложь);

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Отчет", Неопределено);
		ДополнительныеПараметры.Вставить("Объект", Неопределено);
		ДополнительныеПараметры.Вставить("СКД", Неопределено);
		ДополнительныеПараметры.Вставить("КомпоновщикНастроекКД", Неопределено);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ПараметрыОтчета);

		РассылкаОтчетовПереопределяемый.ПриПодготовкеПараметровФормированияОтчета(ПараметрыФормирования,
			ДополнительныеПараметры);

		ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ДополнительныеПараметры);

		ПараметрыФормирования.Вставить("Подключение", ПараметрыОтчета);

		Формирование = ВариантыОтчетов.СформироватьОтчет(ПараметрыФормирования, Истина, Истина);

		Если Формирование.Успех Тогда

			Расширения = Новый Массив;
			СтруктураПоиска = Новый Структура("УникальныйИдентификатор", ВыборкаОтчетов.УникальныйИдентификатор);

			РасширенияОтчетов.Сбросить();
			Пока РасширенияОтчетов.НайтиСледующий(СтруктураПоиска) Цикл
				Расширения.Добавить(РасширенияОтчетов.Расширение);
			КонецЦикла;

			ДанныеОтчета = Новый Структура;
			ДанныеОтчета.Вставить("ТабличныйДокумент", Формирование.ТабличныйДокумент);
			ДанныеОтчета.Вставить("НаименованиеФайла", Строка(Формирование.СсылкаВарианта));
			ДанныеОтчета.Вставить("Расширения", Расширения);

			МассивОтчетов.Добавить(ДанныеОтчета);

		КонецЕсли;

	КонецЦикла;

	Возврат МассивОтчетов;

КонецФункции

Функция ПараметрыФормированияОтчета()

	Результат = Новый Структура;
	Результат.Вставить("СсылкаОтчета", Неопределено);
	Результат.Вставить("СсылкаВарианта", Неопределено);
	Результат.Вставить("КлючВарианта", Неопределено);
	Результат.Вставить("ИдентификаторФормы", Неопределено);

	Возврат Результат;

КонецФункции

Процедура ОтправитьОтчетыВЧаты(Бот, ВыборкаСценарии, НовыеЧаты)

	ОтчетыКОтправке = СформироватьОтчетыПоСценарию(ВыборкаСценарии.Сценарий);

	ВыборкаЧатов = ВыборкаСценарии.Выбрать();

	Пока ВыборкаЧатов.Следующий() Цикл

		ИдентификаторЧата = ВыборкаЧатов.ИдентификаторЧата;

		Чат = ВыборкаЧатов.Чат;
		Если Не ЗначениеЗаполнено(Чат) Тогда
			Чат = НовыеЧаты[ИдентификаторЧата];
		КонецЕсли;

		Если Чат = Неопределено Тогда
			Чат = СоздатьНовыйЧатБота(Бот, ВыборкаЧатов);
			НовыеЧаты.Вставить(ИдентификаторЧата, Чат);
		КонецЕсли;

		Для Каждого ДанныеКОтправке Из ОтчетыКОтправке Цикл

			ТабличныйДокумент = ДанныеКОтправке.ТабличныйДокумент;
			НаименованиеФайла = ДанныеКОтправке.НаименованиеФайла;
			Расширения = ДанныеКОтправке.Расширения;

			Для Каждого Расширение Из Расширения Цикл

				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);

				ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента[Расширение]);

				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);

				ПолноеНаименованиеФайла = НаименованиеФайла + "." + НРег(Расширение);

				Сообщение = НоваяСтруктураСообщенияСДокументом();
				Сообщение.chat_id = ИдентификаторЧата;
				Сообщение.binary = ДвоичныеДанные;
				Сообщение.filename = ПолноеНаименованиеФайла;

				ДвоичныеДанныеСообщения = ТелоВыгрузкиДокумента(Сообщение);
				Если ОтправитьДокументВЧат(Бот, ДвоичныеДанныеСообщения) Тогда
					СохранитьОбработанноеСообщение(Бот, Чат, ВыборкаЧатов);
				КонецЕсли;

				Попытка
					УдалитьФайлы(ИмяВременногоФайла);
				Исключение

					ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Бот.Метаданные(), Бот,
						СтрШаблон(
					НСтр(
			"en = 'Error: %1'; ru = 'Ошибка: %1'; az = 'Səhv: %1'"), ПодробноеПредставлениеОшибки));

				КонецПопытки;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Общение

Процедура ЗапуститьОбщениеСЧатом(Бот, ВыборкаСценарии, НовыеЧаты)

	ВыборкаЧаты = ВыборкаСценарии.Выбрать();

	Сценарий = ВыборкаСценарии.Сценарий; // СправочникСсылка.УБТ_СценарииБотовTelegram
	ЭтапыСценария = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Этапы").Выбрать();
	КнопкиКлавиатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "КнопкиКлавиатуры").Выбрать();
	ИндивидуальноеИсполнениеСценария = ВыборкаСценарии.ИндивидуальноеИсполнениеСценария;

	Если Не ЭтапыСценария.Следующий() Тогда
		Возврат;
	КонецЕсли;

	НаименованиеСтартовогоЭтапа = ЭтапыСценария.НаименованиеЭтапа;
	ИдентификаторСтартовогоЭтапа = ЭтапыСценария.УникальныйИдентификатор;
	ПроизвольныйКодСтартовогоЭтапа = ЭтапыСценария.ПроизвольныйКод;

	ПредопределенныйРезультат = Неопределено;
	Если Не ИндивидуальноеИсполнениеСценария Тогда

		ОбщениеОбъект = Справочники.УБТ_ОбщенияБотовTelegramСЧатами.СоздатьЭлемент();
		ОбщениеОбъект.Бот = Бот;
		ОбщениеОбъект.Сценарий = Сценарий;

		ЭтапыСценария.Сбросить();
		Пока ЭтапыСценария.Следующий() Цикл
			СтрокаЭтапа = ОбщениеОбъект.Этапы.Добавить();
			СтрокаЭтапа.НаименованиеЭтапа = ЭтапыСценария.НаименованиеЭтапа;
			СтрокаЭтапа.УникальныйИдентификатор = ЭтапыСценария.УникальныйИдентификатор;
		КонецЦикла;

		ПараметрыВыполненияЭтапа = Справочники.УБТ_ОбщенияБотовTelegramСЧатами.НоваяСтруктураПараметровВыполненияЭтапа();
		ПараметрыВыполненияЭтапа.НаименованиеТекущегоЭтапа = НаименованиеСтартовогоЭтапа;
		ПараметрыВыполненияЭтапа.ИдентификаторТекущегоЭтапа = ИдентификаторСтартовогоЭтапа;
		ПараметрыВыполненияЭтапа.ПроизвольныйКод = ПроизвольныйКодСтартовогоЭтапа;

		КнопкиКлавиатуры.Сбросить();
		Пока КнопкиКлавиатуры.Следующий() Цикл
			Если КнопкиКлавиатуры.УникальныйИдентификатор = ИдентификаторСтартовогоЭтапа Тогда
				КнопкаКлавиатуры = Справочники.УБТ_ОбщенияБотовTelegramСЧатами.НоваяСтруктураКнопкаКлавиатуры();
				ЗаполнитьЗначенияСвойств(КнопкаКлавиатуры, КнопкиКлавиатуры);
				ПараметрыВыполненияЭтапа.КнопкиКлавиатуры.Добавить(КнопкаКлавиатуры);
			КонецЕсли;
		КонецЦикла;

		ПредопределенныйРезультат = ОбщениеОбъект.ВыполнитьЭтап(ПараметрыВыполненияЭтапа);

	КонецЕсли;

	Пока ВыборкаЧаты.Следующий() Цикл

		ИдентификаторЧата = ВыборкаЧаты.ИдентификаторЧата;

		Чат = ВыборкаЧаты.Чат;
		Если Не ЗначениеЗаполнено(Чат) Тогда
			Чат = НовыеЧаты[ИдентификаторЧата];
		КонецЕсли;

		Если Чат = Неопределено Тогда
			Чат = СоздатьНовыйЧатБота(Бот, ВыборкаЧаты);
			НовыеЧаты.Вставить(ИдентификаторЧата, Чат);
		КонецЕсли;

		ОбщениеОбъект = Справочники.УБТ_ОбщенияБотовTelegramСЧатами.СоздатьЭлемент();
		ОбщениеОбъект.Бот = Бот;
		ОбщениеОбъект.Чат = Чат;
		ОбщениеОбъект.ИдентификаторЧата = ИдентификаторЧата;
		ОбщениеОбъект.ТипЧата = ВыборкаЧаты.ТипЧата;
		ОбщениеОбъект.Сценарий = Сценарий;
		ОбщениеОбъект.ЗапрошенныйСценарий = ВыборкаЧаты.ЗапрошенныйСценарий;
		ОбщениеОбъект.Дата = ТекущаяДатаСеанса();

		ЭтапыСценария.Сбросить();
		Пока ЭтапыСценария.Следующий() Цикл
			СтрокаЭтапа = ОбщениеОбъект.Этапы.Добавить();
			СтрокаЭтапа.НаименованиеЭтапа = ЭтапыСценария.НаименованиеЭтапа;
			СтрокаЭтапа.УникальныйИдентификатор = ЭтапыСценария.УникальныйИдентификатор;
		КонецЦикла;

		ОбщениеОбъект.Записать();

		ПараметрыВыполненияЭтапа = Справочники.УБТ_ОбщенияБотовTelegramСЧатами.НоваяСтруктураПараметровВыполненияЭтапа();
		ПараметрыВыполненияЭтапа.НаименованиеТекущегоЭтапа = НаименованиеСтартовогоЭтапа;
		ПараметрыВыполненияЭтапа.ИдентификаторТекущегоЭтапа = ИдентификаторСтартовогоЭтапа;
		ПараметрыВыполненияЭтапа.ИдентификаторСообщения = ВыборкаЧаты.ИдентификаторСообщения;
		ПараметрыВыполненияЭтапа.ТекстСообщения = ВыборкаЧаты.ТекстСообщения;
		ПараметрыВыполненияЭтапа.Контакт.Имя = ВыборкаЧаты.ИмяКонтакта;
		ПараметрыВыполненияЭтапа.Контакт.НомерТелефона = ВыборкаЧаты.НомерТелефонаКонтакта;
		ПараметрыВыполненияЭтапа.ПроизвольныйКод = ПроизвольныйКодСтартовогоЭтапа;

		КнопкиКлавиатуры.Сбросить();
		Пока КнопкиКлавиатуры.Следующий() Цикл
			Если КнопкиКлавиатуры.УникальныйИдентификатор = ИдентификаторСтартовогоЭтапа Тогда
				КнопкаКлавиатуры = Справочники.УБТ_ОбщенияБотовTelegramСЧатами.НоваяСтруктураКнопкаКлавиатуры();
				ЗаполнитьЗначенияСвойств(КнопкаКлавиатуры, КнопкиКлавиатуры);
				ПараметрыВыполненияЭтапа.КнопкиКлавиатуры.Добавить(КнопкаКлавиатуры);
			КонецЕсли;
		КонецЦикла;

		Если ПредопределенныйРезультат <> Неопределено Тогда
			ПараметрыВыполненияЭтапа.ПредопределенныйРезультат = ПредопределенныйРезультат;
		КонецЕсли;

		ВыполнитьЭтапОбщения(ОбщениеОбъект.Ссылка, ПараметрыВыполненияЭтапа);

	КонецЦикла;

КонецПроцедуры

Процедура ПродолжитьОбщениеСЧатом(ДанныеЧата, ДанныеОбщения)

	ПараметрыВыполненияЭтапа = Справочники.УБТ_ОбщенияБотовTelegramСЧатами.НоваяСтруктураПараметровВыполненияЭтапа();
	ПараметрыВыполненияЭтапа.НаименованиеТекущегоЭтапа = ДанныеОбщения.НаименованиеЭтапа;
	ПараметрыВыполненияЭтапа.ИдентификаторТекущегоЭтапа = ДанныеОбщения.УникальныйИдентификатор;
	ПараметрыВыполненияЭтапа.ИдентификаторСообщения = ДанныеЧата.ИдентификаторСообщения;
	ПараметрыВыполненияЭтапа.ТекстСообщения = ДанныеЧата.ТекстСообщения;
	ПараметрыВыполненияЭтапа.Контакт.Имя = ДанныеЧата.ИмяКонтакта;
	ПараметрыВыполненияЭтапа.Контакт.НомерТелефона = ДанныеЧата.НомерТелефонаКонтакта;
	ПараметрыВыполненияЭтапа.ПроизвольныйКод = ДанныеОбщения.ПроизвольныйКод;

	Сценарий = ДанныеОбщения.Сценарий; // СправочникСсылка.УБТ_СценарииБотовTelegram
	КнопкиКлавиатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "КнопкиКлавиатуры").Выбрать();
	Пока КнопкиКлавиатуры.Следующий() Цикл
		Если КнопкиКлавиатуры.УникальныйИдентификатор = ДанныеОбщения.УникальныйИдентификатор Тогда
			КнопкаКлавиатуры = Справочники.УБТ_ОбщенияБотовTelegramСЧатами.НоваяСтруктураКнопкаКлавиатуры();
			ЗаполнитьЗначенияСвойств(КнопкаКлавиатуры, КнопкиКлавиатуры);
			ПараметрыВыполненияЭтапа.КнопкиКлавиатуры.Добавить(КнопкаКлавиатуры);
		КонецЕсли;
	КонецЦикла;

	ВыполнитьЭтапОбщения(ДанныеОбщения.Общение, ПараметрыВыполненияЭтапа);

КонецПроцедуры

Процедура ВыполнитьЭтапОбщения(Общение, ПараметрыВыполненияЭтапа)

	ОбщениеОбъект = Общение.ПолучитьОбъект();

	Бот = ОбщениеОбъект.Бот;
	ИдентификаторЧата = ОбщениеОбъект.ИдентификаторЧата;

	Отказ = Ложь;

	НачатьТранзакцию();

	Попытка

		Результат = ПараметрыВыполненияЭтапа.ПредопределенныйРезультат;

		Если Результат = Неопределено Тогда
			Результат = ОбщениеОбъект.ВыполнитьЭтап(ПараметрыВыполненияЭтапа);
		Иначе
			ОбщениеОбъект.ЗавершитьЭтап(ПараметрыВыполненияЭтапа.НаименованиеТекущегоЭтапа);
		КонецЕсли;

		Если ЗначениеЗаполнено(Результат.Сообщение.Текст) Тогда

			Клавиатура = СтруктураУдаленияКлавиатуры();

			КнопкиКлавиатуры = Новый Массив;
			Для Каждого Кнопка Из ПараметрыВыполненияЭтапа.КнопкиКлавиатуры Цикл
				ВстроенаяКнопкаКлавиатуры = НоваяКнопкаКлавиатуры();
				ВстроенаяКнопкаКлавиатуры.text = Кнопка.Наименование;
				ВстроенаяКнопкаКлавиатуры.request_contact = Кнопка.ЗапросНомераТелефона;
				КнопкиКлавиатуры.Добавить(ВстроенаяКнопкаКлавиатуры);
			КонецЦикла;

			Если КнопкиКлавиатуры.Количество() > 0 Тогда
				Клавиатура = НоваяКлавиатураПредоределенногоОтвета();
				Клавиатура.keyboard.Добавить(КнопкиКлавиатуры);
			КонецЕсли;

			Сообщение = НоваяСтруктураСообщенияЧата();
			Сообщение.chat_id = ИдентификаторЧата;
			Сообщение.text = Результат.Сообщение.Текст;
			Сообщение.reply_markup = Клавиатура;

			РезультатПередачиСообщения = ОтправитьСообщениеВЧат(Бот, Сообщение);
			Если РезультатПередачиСообщения = Неопределено Тогда
				Отказ = Истина;
			КонецЕсли;

			ИдентификаторПереданногоСообщения = РезультатПередачиСообщения.result.message_id;
			СтрокаПереданногоСообщения = ОбщениеОбъект.ПереданныеСообщения.Добавить();
			СтрокаПереданногоСообщения.ИдентификаторСообщения = ИдентификаторПереданногоСообщения;

		ИначеЕсли ОбщениеОбъект.ПереданныеСообщения.Количество() > 0 Тогда

			ВсегоПереданоСообщений = ОбщениеОбъект.ПереданныеСообщения.Количество();
			ИдентификаторПоследнегоСообщения = ОбщениеОбъект.ПереданныеСообщения[ВсегоПереданоСообщений
				- 1].ИдентификаторСообщения;

			Клавиатура = СтруктураУдаленияКлавиатуры();

			КнопкиКлавиатуры = Новый Массив;
			Для Каждого Кнопка Из ПараметрыВыполненияЭтапа.КнопкиКлавиатуры Цикл
				Если Кнопка.ЗапросНомераТелефона Тогда
					Продолжить;
				КонецЕсли;
				ВстроенаяКнопкаКлавиатуры = НоваяВстроеннаяКнопкаКлавиатуры();
				ВстроенаяКнопкаКлавиатуры.text = Кнопка.Наименование;
				ВстроенаяКнопкаКлавиатуры.callback_data = Кнопка.Наименование;
				КнопкиКлавиатуры.Добавить(ВстроенаяКнопкаКлавиатуры);
			КонецЦикла;

			Если КнопкиКлавиатуры.Количество() > 0 Тогда
				Клавиатура = НоваяВстроеннаяКлавиатураПредоределенногоОтвета();
				Клавиатура.inline_keyboard.Добавить(КнопкиКлавиатуры);
			КонецЕсли;

			СтруктураОбновленияКлавиатуры = НоваяСтруктураОбновленияКлавиатурыЧата();
			СтруктураОбновленияКлавиатуры.chat_id = ИдентификаторЧата;
			СтруктураОбновленияКлавиатуры.message_id = ИдентификаторПоследнегоСообщения;
			СтруктураОбновленияКлавиатуры.reply_markup = Клавиатура;
			Если Не ИзменитьКлавиатуруОтвета(Бот, СтруктураОбновленияКлавиатуры) Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

		Для Каждого ДанныеФайла Из Результат.Файлы Цикл
			Сообщение = НоваяСтруктураСообщенияСДокументом();
			Сообщение.chat_id = ИдентификаторЧата;
			Сообщение.binary = ДанныеФайла.ДвоичныеДанные;
			Сообщение.filename = ДанныеФайла.НаименованиеСРасширением;

			ДвоичныеДанныеСообщения = ТелоВыгрузкиДокумента(Сообщение);
			Если Не ОтправитьДокументВЧат(Бот, ДвоичныеДанныеСообщения) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;

		ОбщениеОбъект.Записать();

		Если Отказ Тогда
			ТекстОшибки = НСтр(
				"az = 'Mesajın göndərilməsində problemlər yarandı. Ətraflı məlumat üçün qeydiyyat jurnalına baxın.';en = 'There were issues delivering the message to the chat. See the log for details.';ru = 'Возникли проблемы при передаче сообщения в чат. Смотрите журнал регистрации.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Бот.Метаданные(), Бот, СтрШаблон(НСтр(
			"en = 'Error: %1'; ru = 'Ошибка: %1'; az = 'Səhv: %1'"), ПодробноеПредставлениеОшибки));

		ОтправитьСообщениеОбОшибке(Бот, ИдентификаторЧата);

	КонецПопытки;

	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("ИдентификаторСообщения", ПараметрыВыполненияЭтапа.ИдентификаторСообщения);
	ДанныеСообщения.Вставить("ТекстСообщения", ПараметрыВыполненияЭтапа.ТекстСообщения);

	СохранитьОбработанноеСообщение(Бот, ОбщениеОбъект.Чат, ДанныеСообщения);

КонецПроцедуры

Процедура ЗавершитьНеоконченноеОбщениеСЧатом(Общение)

	ОбщениеОбъект = Общение.ПолучитьОбъект();
	ОбщениеОбъект.Завершено = Истина;
	ОбщениеОбъект.Записать();

КонецПроцедуры

#КонецОбласти

#Область ВыполнениеПроизвольногоСценария

Процедура ВыполнитьСценарийИОтправитьСообщениеВЧат(Бот, ВыборкаСценарии, НовыеЧаты)

	ВыборкаЧатов = ВыборкаСценарии.Выбрать();

	Сценарий = ВыборкаСценарии.Сценарий; // СправочникСсылка.УБТ_СценарииБотовTelegram
	ПроизвольныйКод = ВыборкаСценарии.ПроизвольныйКод; // Строка
	ИндивидуальноеИсполнениеСценария = ВыборкаСценарии.ИндивидуальноеИсполнениеСценария;

	ПараметрыВыполнения = НоваяСтруктураПараметрыВыполненияПроизвольногоСценария();
	ПараметрыВыполнения.Бот = Бот;
	ПараметрыВыполнения.Сценарий = Сценарий;

	Результат = НоваяСтруктураРезультатаПроизвольногоКода();

	Если Не ИндивидуальноеИсполнениеСценария Тогда
		ВыполнитьПроизвольныйКод(ПроизвольныйКод, ПараметрыВыполнения, Результат);
	КонецЕсли;

	Пока ВыборкаЧатов.Следующий() Цикл

		ИдентификаторЧата = ВыборкаЧатов.ИдентификаторЧата;

		Чат = ВыборкаЧатов.Чат;
		Если Не ЗначениеЗаполнено(Чат) Тогда
			Чат = НовыеЧаты[ИдентификаторЧата];
		КонецЕсли;

		Если Чат = Неопределено Тогда
			Чат = СоздатьНовыйЧатБота(Бот, ВыборкаЧатов);
			НовыеЧаты.Вставить(ИдентификаторЧата, Чат);
		КонецЕсли;

		Если ИндивидуальноеИсполнениеСценария Тогда

			ПараметрыВыполнения.Чат = Чат;
			ПараметрыВыполнения.ИдентификаторЧата = ИдентификаторЧата;
			ПараметрыВыполнения.НаименованиеЧата = ВыборкаЧатов.НаименованиеЧата;
			ПараметрыВыполнения.ТипЧата = ВыборкаЧатов.ТипЧата;

			Результат = НоваяСтруктураРезультатаПроизвольногоКода();
			ВыполнитьПроизвольныйКод(ПроизвольныйКод, ПараметрыВыполнения, Результат);

		КонецЕсли;

		СообщениеОтправлено = Ложь;

		Если ЗначениеЗаполнено(Результат.Сообщение.Текст) Тогда
			Сообщение = НоваяСтруктураСообщенияЧата();
			Сообщение.chat_id = ИдентификаторЧата;
			Сообщение.text = Результат.Сообщение.Текст;
			Если ОтправитьСообщениеВЧат(Бот, Сообщение) <> Неопределено Тогда
				СообщениеОтправлено = Истина;
			КонецЕсли;
		КонецЕсли;

		Если Результат.Файлы.Количество() > 0 Тогда
			Для Каждого ДанныеФайла Из Результат.Файлы Цикл

				Сообщение = НоваяСтруктураСообщенияСДокументом();
				Сообщение.chat_id = ИдентификаторЧата;
				Сообщение.binary = ДанныеФайла.ДвоичныеДанные;
				Сообщение.filename = ДанныеФайла.НаименованиеСРасширением;

				ДвоичныеДанныеСообщения = ТелоВыгрузкиДокумента(Сообщение);

				Если ОтправитьДокументВЧат(Бот, ДвоичныеДанныеСообщения) Тогда
					СообщениеОтправлено = Истина;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

		Если СообщениеОтправлено Тогда
			СохранитьОбработанноеСообщение(Бот, Чат, ВыборкаЧатов);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция НоваяСтруктураПараметрыВыполненияПроизвольногоСценария()

	ПараметрыВычисления = Новый Структура;
	ПараметрыВычисления.Вставить("Бот", Справочники.УБТ_БотыTelegram.ПустаяСсылка());
	ПараметрыВычисления.Вставить("Сценарий", Справочники.УБТ_СценарииБотовTelegram.ПустаяСсылка());
	ПараметрыВычисления.Вставить("Чат", Справочники.УБТ_ЧатыTelegram.ПустаяСсылка());
	ПараметрыВычисления.Вставить("ИдентификаторЧата", "");
	ПараметрыВычисления.Вставить("НаименованиеЧата", "");
	ПараметрыВычисления.Вставить("ТипЧата", Перечисления.УБТ_ТипыЧатовTelegram.ПустаяСсылка());

	Возврат ПараметрыВычисления;

КонецФункции

Процедура ВыполнитьПроизвольныйКод(ПроизвольныйКод, Параметры, Результат = Неопределено)

	Попытка

		УстановитьБезопасныйРежим(Истина);

		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			МассивРазделителей = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
		Иначе
			МассивРазделителей = Новый Массив;
		КонецЕсли;

		Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;

		Выполнить (ПроизвольныйКод);

	Исключение

		ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Параметры.Бот.Метаданные(), Параметры.Бот,
			СтрШаблон(НСтр("en = 'Error: %1'; ru = 'Ошибка: %1'; az = 'Səhv: %1'"), ПодробноеПредставлениеОшибки));

	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОтправкаДокумента

Функция РазделительMultipartFormData()

	Возврат "WebKitFormBoundary7MA4YWxkTrZu0gW";

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПодписокНаСобытия

// Выполняет запуск заданий по взаимодействию с ботами Telegram.
//
// Параметры:
//  ИмяБота - Строка - Строка с именем бота.
Процедура УБТ_ВзаимодействиеСБотамиTelegram(ИмяБота) Экспорт

	ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.УБТ_ВзаимодействиеСБотамиTelegram);

	Бот = Справочники.УБТ_БотыTelegram.НайтиБотаTelegramПоИмени(ИмяБота);

	Если Не ЗначениеЗаполнено(Бот) Тогда

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Бот.Метаданные(), Бот, СтрШаблон(НСтр(
			"en = 'No bot named %1 was found'; ru = 'Не найден бот с именем %1'; az = '%1 adlı bot tapılmadı'"),
			ИмяБота));

		Возврат;

	КонецЕсли;

	ОбработатьПолученныеСообщенияБота(Бот);

КонецПроцедуры

// Запускает исполнение сценариев Telegram ботов по заданному расписанию.
// 
// Параметры:
//  ИдентификаторСценария - Строка - Уникальный идентификатор сценария
Процедура УБТ_ИсполнениеСценариевTelegramБотов(ИдентификаторСценария) Экспорт

	ИмяСобытия = ИмяСобытияВзаимодействияСБотамиTelegram();

	Сценарий = Справочники.УБТ_СценарииБотовTelegram.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ИдентификаторСценария));

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ЧатыСценария.Ссылка КАК Сценарий,
						  |	ЧатыСценария.Чат КАК Чат
						  |ПОМЕСТИТЬ ВтЧатыСценария
						  |ИЗ
						  |	Справочник.УБТ_СценарииБотовTelegram.Чаты КАК ЧатыСценария
						  |ГДЕ
						  |	ЧатыСценария.Ссылка = &Сценарий
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	УБТ_СценарииБотовTelegram.Ссылка КАК Сценарий,
						  |	УБТ_ЧатыTelegram.Ссылка КАК Чат
						  |ПОМЕСТИТЬ ВтЧаты
						  |ИЗ
						  |	Справочник.УБТ_СценарииБотовTelegram КАК УБТ_СценарииБотовTelegram
						  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УБТ_ЧатыTelegram КАК УБТ_ЧатыTelegram
						  |		ПО УБТ_СценарииБотовTelegram.Бот = УБТ_ЧатыTelegram.Владелец
						  |		ЛЕВОЕ СОЕДИНЕНИЕ ВтЧатыСценария КАК ВтЧатыСценария
						  |		ПО УБТ_СценарииБотовTelegram.Ссылка = ВтЧатыСценария.Сценарий
						  |ГДЕ
						  |	УБТ_СценарииБотовTelegram.Ссылка = &Сценарий
						  |	И ВтЧатыСценария.Сценарий ЕСТЬ NULL
						  |
						  |ОБЪЕДИНИТЬ ВСЕ
						  |
						  |ВЫБРАТЬ
						  |	ВтЧатыСценария.Сценарий,
						  |	ВтЧатыСценария.Чат
						  |ИЗ
						  |	ВтЧатыСценария КАК ВтЧатыСценария
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВтЧаты.Сценарий.Бот КАК Бот,
						  |	ВтЧаты.Сценарий КАК Сценарий,
						  |	ВтЧаты.Сценарий КАК ЗапрошенныйСценарий,
						  |	ВтЧаты.Сценарий.ТипСценария КАК ТипСценария,
						  |	ВтЧаты.Сценарий.ПроизвольныйКод КАК ПроизвольныйКод,
						  | ВтЧаты.Сценарий.ИндивидуальноеИсполнениеСценария КАК ИндивидуальноеИсполнениеСценария,
						  |	ВтЧаты.Чат КАК Чат,
						  |	ВтЧаты.Чат.Код КАК ИдентификаторЧата,
						  |	ВтЧаты.Чат.Наименование КАК НаименованиеЧата,
						  |	ВтЧаты.Чат.ТипЧата КАК ТипЧата,
						  |	ВтЧаты.Чат.ИмяКонтакта КАК ИмяКонтакта,
						  |	ВтЧаты.Чат.НомерТелефона КАК НомерТелефонаКонтакта,
						  |	"""" КАК ТекстСообщения,
						  |	"""" КАК ИдентификаторСообщения
						  |ИЗ
						  |	ВтЧаты КАК ВтЧаты
						  |ИТОГИ
						  |ПО
						  |	Сценарий");
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	ВыборкаСценарии = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Если ВыборкаСценарии.Следующий() Тогда

		Бот = ВыборкаСценарии.Бот;

		НовыеЧаты = Новый Соответствие;

		Если ВыборкаСценарии.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.ОтправкаОтчета Тогда

			ОтправитьОтчетыВЧаты(Бот, ВыборкаСценарии, НовыеЧаты);

		ИначеЕсли ВыборкаСценарии.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.Общение Тогда

			ЗапуститьОбщениеСЧатом(Бот, ВыборкаСценарии, НовыеЧаты);

		ИначеЕсли ВыборкаСценарии.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.ПроизвольныйСценарий Тогда

			ВыполнитьСценарийИОтправитьСообщениеВЧат(Бот, ВыборкаСценарии, НовыеЧаты);

		КонецЕсли;

	Иначе

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Сценарий.Метаданные(),
			ИдентификаторСценария, СтрШаблон(НСтр(
			"az = '%1 identifikator ilə skript tapılmadı';en = 'No script with ID %1 was found';ru = 'Не найден сценарий с идентификатором %1'"),
			ИдентификаторСценария));

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция АдаптироватьHTMLТекстаСообщения(ТекстHTML)

	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);

	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);

	ЧтениеHTML.Закрыть();

	АдаптированныйHTML = "";

	ПоддерживаемыеHTMLТеги = ПоддерживаемыеHTMLТеги();
	ПоддерживаемыеHTMLАтрибуты = ПоддерживаемыеHTMLАтрибуты();

	АдаптироватьУзлыHTMLДокумента(ДокументHTML.ДочерниеУзлы, ПоддерживаемыеHTMLТеги, ПоддерживаемыеHTMLАтрибуты,
		АдаптированныйHTML);

	Возврат АдаптированныйHTML;

КонецФункции

Процедура АдаптироватьУзлыHTMLДокумента(ДочерниеУзлы, ПоддерживаемыеHTMLТеги, ПоддерживаемыеHTMLАтрибуты,
	АдаптированныйHTML)

	Для Каждого Узел Из ДочерниеУзлы Цикл

		СодержимоеУзла = Узел.ТекстовоеСодержимое;
		ИмяУзла = Узел.ИмяУзла;
		АтрибутыУзла = "";

		СтилиТега = Новый Структура;
		СтилиТега.Вставить("ЭтоЖирныйШрифт", Ложь);
		СтилиТега.Вставить("ЭтоПодчеркнутыйШрифт", Ложь);
		СтилиТега.Вставить("ЭтоКурсивныйШрифт", Ложь);

		Если Узел.Атрибуты <> Неопределено Тогда
			Для Каждого Атрибут Из Узел.Атрибуты Цикл

				Если ПоддерживаемыеHTMLАтрибуты.Найти(Атрибут.Имя) <> Неопределено Тогда
					АтрибутыУзла = АтрибутыУзла + " " + Атрибут.Имя + "=""" + Атрибут.Значение + """";
				КонецЕсли;

				Если Атрибут.Имя = "style" Тогда

					Если СтрНайти(Атрибут.Значение, "font-weight: bold") > 0 Тогда
						СтилиТега.ЭтоЖирныйШрифт = Истина;
					КонецЕсли;

					Если СтрНайти(Атрибут.Значение, "font-style: italic") > 0 Тогда
						СтилиТега.ЭтоКурсивныйШрифт = Истина;
					КонецЕсли;

					Если СтрНайти(Атрибут.Значение, "text-decoration: underline") > 0 Тогда
						СтилиТега.ЭтоПодчеркнутыйШрифт = Истина;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

		ПоддерживаемыйТег = ПоддерживаемыеHTMLТеги.Найти(ИмяУзла) <> Неопределено;

		Если ИмяУзла = "span" И СтрНайти(АтрибутыУзла, "class=""tg-spoiler""") = 0 Тогда
			ПоддерживаемыйТег = Ложь;
		КонецЕсли;

		Если ИмяУзла = "a" И СтрНайти(НРег(АтрибутыУзла), "href=") = 0 Тогда
			ПоддерживаемыйТег = Ложь;
		КонецЕсли;

		Если ИмяУзла = "tg-emoji" И СтрНайти(НРег(АтрибутыУзла), "emoji-id=") = 0 Тогда
			ПоддерживаемыйТег = Ложь;
		КонецЕсли;

		Если ПоддерживаемыйТег И ИмяУзла = "#text" Тогда
			АдаптированныйHTML = АдаптированныйHTML + СодержимоеУзла;
			АдаптироватьУзлыHTMLДокумента(Узел.ДочерниеУзлы, ПоддерживаемыеHTMLТеги, ПоддерживаемыеHTMLАтрибуты,
				АдаптированныйHTML);
		ИначеЕсли ИмяУзла = "br" Тогда
			АдаптированныйHTML = АдаптированныйHTML + Символы.ПС;
		ИначеЕсли ПоддерживаемыйТег Тогда
			АдаптированныйHTML = АдаптированныйHTML + СтрШаблон("<%1 %2>", ИмяУзла, АтрибутыУзла);
			ДобавитьТегиТрансляцииСтилей(СтилиТега, АдаптированныйHTML);
			АдаптироватьУзлыHTMLДокумента(Узел.ДочерниеУзлы, ПоддерживаемыеHTMLТеги, ПоддерживаемыеHTMLАтрибуты,
				АдаптированныйHTML);
			ДобавитьТегиТрансляцииСтилей(СтилиТега, АдаптированныйHTML, Истина);
			АдаптированныйHTML = АдаптированныйHTML + СтрШаблон("</%1>", ИмяУзла);
		Иначе
			ДобавитьТегиТрансляцииСтилей(СтилиТега, АдаптированныйHTML);
			АдаптироватьУзлыHTMLДокумента(Узел.ДочерниеУзлы, ПоддерживаемыеHTMLТеги, ПоддерживаемыеHTMLАтрибуты,
				АдаптированныйHTML);
			ДобавитьТегиТрансляцииСтилей(СтилиТега, АдаптированныйHTML, Истина);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьТегиТрансляцииСтилей(ПараметрыСтилей, АдаптированныйHTML, ЭтоЗакрывающиеТеги = Ложь)

	Если Не ЭтоЗакрывающиеТеги Тогда

		ШаблонТега = "<%1>";

		Если ПараметрыСтилей.ЭтоПодчеркнутыйШрифт Тогда
			АдаптированныйHTML = АдаптированныйHTML + СтрШаблон(ШаблонТега, "u");
		КонецЕсли;

		Если ПараметрыСтилей.ЭтоКурсивныйШрифт Тогда
			АдаптированныйHTML = АдаптированныйHTML + СтрШаблон(ШаблонТега, "i");
		КонецЕсли;

		Если ПараметрыСтилей.ЭтоЖирныйШрифт Тогда
			АдаптированныйHTML = АдаптированныйHTML + СтрШаблон(ШаблонТега, "b");
		КонецЕсли;

	Иначе

		ШаблонТега = "</%1>";

		Если ПараметрыСтилей.ЭтоЖирныйШрифт Тогда
			АдаптированныйHTML = АдаптированныйHTML + СтрШаблон(ШаблонТега, "b");
		КонецЕсли;

		Если ПараметрыСтилей.ЭтоКурсивныйШрифт Тогда
			АдаптированныйHTML = АдаптированныйHTML + СтрШаблон(ШаблонТега, "i");
		КонецЕсли;

		Если ПараметрыСтилей.ЭтоПодчеркнутыйШрифт Тогда
			АдаптированныйHTML = АдаптированныйHTML + СтрШаблон(ШаблонТега, "u");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПоддерживаемыеHTMLТеги()

	ПоддерживаемыеHTMLТеги = Новый Массив;
	ПоддерживаемыеHTMLТеги.Добавить("#text");
	ПоддерживаемыеHTMLТеги.Добавить("b");
	ПоддерживаемыеHTMLТеги.Добавить("strong");
	ПоддерживаемыеHTMLТеги.Добавить("i");
	ПоддерживаемыеHTMLТеги.Добавить("em");
	ПоддерживаемыеHTMLТеги.Добавить("u");
	ПоддерживаемыеHTMLТеги.Добавить("ins");
	ПоддерживаемыеHTMLТеги.Добавить("s");
	ПоддерживаемыеHTMLТеги.Добавить("strike");
	ПоддерживаемыеHTMLТеги.Добавить("del");
	ПоддерживаемыеHTMLТеги.Добавить("code");
	ПоддерживаемыеHTMLТеги.Добавить("pre");
	ПоддерживаемыеHTMLТеги.Добавить("a");
	ПоддерживаемыеHTMLТеги.Добавить("blockquote");
	ПоддерживаемыеHTMLТеги.Добавить("tg-spoiler");
	ПоддерживаемыеHTMLТеги.Добавить("span");
	ПоддерживаемыеHTMLТеги.Добавить("tg-emoji");

	Возврат ПоддерживаемыеHTMLТеги;

КонецФункции

Функция ПоддерживаемыеHTMLАтрибуты()

	ПоддерживаемыеHTMLАтрибуты = Новый Массив;
	ПоддерживаемыеHTMLАтрибуты.Добавить("href");

	Возврат ПоддерживаемыеHTMLАтрибуты;

КонецФункции

Функция СоздатьНовыйЧатБота(Бот, ДанныеЧата)

	ЧатОбъект = Справочники.УБТ_ЧатыTelegram.СоздатьЭлемент();
	ЧатОбъект.Владелец = Бот;
	ЧатОбъект.Код = ДанныеЧата.ИдентификаторЧата;
	ЧатОбъект.Наименование = ДанныеЧата.НаименованиеЧата;
	ЧатОбъект.ТипЧата = ДанныеЧата.ТипЧата;
	ЧатОбъект.Записать();

	Возврат ЧатОбъект.Ссылка;

КонецФункции

Процедура СохранитьОбработанноеСообщение(Бот, Чат, ДанныеСообщения)

	НоваяЗапись = РегистрыСведений.УБТ_ОбработанныеСообщенияБотовTelegram.СоздатьМенеджерЗаписи();
	НоваяЗапись.ИдентификаторСообщения = ДанныеСообщения.ИдентификаторСообщения;
	НоваяЗапись.Бот = Бот;
	НоваяЗапись.Чат = Чат;
	НоваяЗапись.Дата = ТекущаяДатаСеанса();
	НоваяЗапись.ТекстСообщения = ДанныеСообщения.ТекстСообщения;
	НоваяЗапись.Записать();

КонецПроцедуры

Функция ИмяСобытияВзаимодействияСБотамиTelegram()

	Возврат НСтр("en = 'Telegram bots'; ru = 'Боты Telegram'; az = 'Telegram botları'",
		ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Процедура ОтправитьСообщениеОбОшибке(Бот, ИдентификаторЧата)

	Сообщение = НоваяСтруктураСообщенияЧата();
	Сообщение.chat_id = ИдентификаторЧата;
	Сообщение.text = НСтр(
		"az = 'Mesajın emal zaman səhv oldu.';en = 'An error occurred while processing the message.';ru = 'Произошла ошибка при обработке сообщения.'");
	ОтправитьСообщениеВЧат(Бот, Сообщение);

КонецПроцедуры

Процедура СообщитьОНеизвестнойКоманде(Бот, Чат, ВыборкаЧатов)

	Сообщение = НоваяСтруктураСообщенияЧата();
	Сообщение.chat_id = ВыборкаЧатов.ИдентификаторЧата;
	Сообщение.text = НСтр(
		"az = 'Zəhmət olmasa, mövcud bot komandalarından birini seçin.';en = 'Please select one of the available bot commands.';ru = 'Пожалуйста, выберите одну из доступных команд бота.'");
	ОтправитьСообщениеВЧат(Бот, Сообщение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти