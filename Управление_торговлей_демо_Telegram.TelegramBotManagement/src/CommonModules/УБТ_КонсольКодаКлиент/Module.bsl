#Область ПрограммныйИнтерфейс

#Область СобытияФормы

// Вызывается при открытии формы, в которой размещена консоль кода.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ПриОткрытии(Форма) Экспорт

	ДопПараметры = Новый Структура("Форма", Форма);

	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, ДопПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	ОпределитьРазделительПути(Форма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора

// Вызывается при готовности HTML-поля на форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ConsoleOnReady(Форма) Экспорт

	Если Форма.ИсходникиЗагружены Тогда

		Форма.ДокументЗагружен = Истина;

#Если ВебКлиент Тогда
		Если ВебДокументДоступен(Форма) Тогда
			ИнициализацияРедактора(Форма);
			АктивироватьДополнительныеФункции(Форма);
		Иначе
			ПоказатьПредупреждение( , НСтр("az = 'Təəssüf ki, veb-klientdə demək olar ki, bütün funksiyalar əlçatan deyil.
										   |Yalnız kod yazarkən avtomatik tamamlanma və parametr ipuçlarının necə işlədiyinə baxa bilərsiniz.';en = 'Unfortunately, almost all functions are unavailable in the web client.
										   |You can only view how code autocompletion and parameter hints work while typing.';ru = 'К сожалению, в веб-клиенте недоступны практически все функции.
										   |Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.'"));
		КонецЕсли;
#Иначе
			ИнициализацияРедактора(Форма);
			АктивироватьДополнительныеФункции(Форма);
#КонецЕсли

	КонецЕсли
	;

КонецПроцедуры

// Вызывается при нажатии HTML-поля.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ДанныеСобытия -  ФиксированнаяСтруктура - Данные события
Процедура ConsoleOnClick(Форма, ДанныеСобытия) Экспорт

	Если Не Форма.ТолькоПросмотр Тогда
		ОбработатьСобытиеРедактора(Форма, ДанныеСобытия.Event.eventData1C);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

// Возвращает текст HTML-поля.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ДляВыполнения - Булево - Для выполнения
// 
// Возвращаемое значение:
//  Число - Текст HTMLПоля
Функция ТекстHTMLПоля(Форма, ДляВыполнения = Ложь) Экспорт

	Код = View(Форма).getText();

	Переменные = ?(ДляВыполнения, ПолучитьКодПросмотраПеременных(Форма), "");

	Код = Код + Переменные;

	Возврат Код;

КонецФункции

// Устанавливает текст HTML-поля консоли.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Текст - Строка - Текст
//  Позиция - Неопределено - Позиция
//  УчитыватьОтступПервойСтроки - Булево - Учитывать отступ первой строки
Процедура УстановитьТекст(Форма, Текст, Позиция, УчитыватьОтступПервойСтроки) Экспорт

	View(Форма).setText(Текст, Позиция, УчитыватьОтступПервойСтроки);

КонецПроцедуры

// Очищает текст HTML-поля консоли.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ОчиститьТекст(Форма) Экспорт

	View(Форма).eraseText();

КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКода

// Выполняет код консоли для проверки работоспособности.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Результат - Структура - Результат
Процедура ОбработатьРезультатВыполнения(Форма, Результат) Экспорт

	View(Форма).setCustomCodeLenses("[]");

	Если Не Результат.Успешно Тогда

		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);

		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;

		Если НомерСтроки = 0 Тогда
			НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Результат.ОписаниеОшибки);
		КонецЕсли;

		Если НомерСтроки = 0 Тогда
			НомерСтроки = НайтиСтрокуВКоде(Форма, Результат.ИсходнаяСтрока);
		КонецЕсли;

		ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.ТекстОшибки);

		Если 0 < НомерСтроки Тогда
			View(Форма).markError(НомерСтроки, НомерКолонки);
		КонецЕсли;

	Иначе

		Форма.АдресХраненияПеременных = Результат.АдресХраненияПеременных;

		Если ЗначениеЗаполнено(Результат.ОписаниеПеременных) Тогда

			Если Форма.ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда

				View(Форма).showVariablesDescription(Результат.ОписаниеПеременных);

			ИначеЕсли Форма.ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда

				View(Форма).setCustomHovers(Результат.ОписаниеПеременных);

				Если Результат.ОписаниеПеременных <> "{}" Тогда
					View(Форма).setCustomCodeLenses(
						"[{""lineNumber"": 1,""column"": 1,""text"": ""Для просмотра значений наведите курсор на переменную""}]");
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияРедактора

Функция ИндексныйФайл(КаталогИсходников)

	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";

КонецФункции

Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт

	Форма = ДопПараметры.Форма;

	Форма.HTML = СкопированныйФайл;
	Форма.ИсходникиЗагружены = Истина;

КонецПроцедуры

Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт

#Если Не ВебКлиент Тогда

	Форма = ДопПараметры.Форма;
	КаталогИсходников = Форма.КаталогИсходников;

	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "tbm_bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + "tbm.ver");
		Файл.ЗаписатьСтроку(ОбщегоНазначенияКлиент.ДатаСеанса());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл(КаталогИсходников);
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект, ДопПараметры);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку(Форма, НСтр(
			"az = 'Mənbə fayllarını çıxarmaq mümkün olmadı';en = 'Failed to extract the source files';ru = 'Не удалось извлечь исходники'")
			+ Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;

#КонецЕсли

КонецПроцедуры

Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт

	Форма = ДопПараметры.Форма;

	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект, ДопПараметры);
	ИмяФайла = Форма.КаталогИсходников + "tbm_bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(ДопПараметры.АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);

КонецПроцедуры

Процедура ИзвлечьИсходникиНаКлиенте(ДопПараметры)

	Форма = ДопПараметры.Форма;

	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект, ДопПараметры);
	НачатьУдалениеФайлов(Оповещение, Форма.КаталогИсходников, "*.*");

КонецПроцедуры

Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт

	Форма = ДопПараметры.Форма;
	Если Существует Тогда
		ИндексныйФайл = ИндексныйФайл(Форма.КаталогИсходников);
		ТочкаВхода = Форма.КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект, ДопПараметры);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте(ДопПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт

	Форма = ДопПараметры.Форма;

	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект, ДопПараметры);
		ФайлНаДиске = Новый Файл(Форма.КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте(ДопПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт

	Форма = ДопПараметры.Форма;

	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект, ДопПараметры);
		ФайлНаДиске = Новый Файл(Форма.КаталогИсходников + "tbm.ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ВывестиОшибку(Форма, НСтр(
			"az = 'Mənbə faylları üçün qovluq yaratmaq mümkün olmadı';en = 'Failed to create a directory for source files';ru = 'Не удалось создать каталог для исходников'"),
			Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт

	Форма = ДопПараметры.Форма;

	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект, ДопПараметры);
	ФайлНаДиске = Новый Файл(Форма.КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт

	ДопПараметры.Форма.КаталогИсходников = ИмяКаталога + "tbm_bsl_console\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект, ДопПараметры);
	НачатьСозданиеКаталога(Оповещение, ДопПараметры.Форма.КаталогИсходников);

КонецПроцедуры

Процедура ИзвлечьИсходники(Форма)

#Если ВебКлиент Тогда
	Форма.HTML = "https://salexdv.github.io/bsl_console/src/index.html";
	Форма.ИсходникиЗагружены = Истина;
#Иначе
		ДопПараметры = Новый Структура("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект, ДопПараметры);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
#КонецЕсли

КонецПроцедуры

Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт

	Если Подключено Тогда

		Форма = ДопПараметры.Форма;
		ИзвлечьИсходники(Форма);

	Иначе

#Если ВебКлиент Тогда
		Если ДопПараметры = Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтотОбъект);
			НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
		Иначе
			ПоказатьПредупреждение( , НСтр(
				"az = 'Təəssüf ki, veb-klientdə işləmək mümkün deyil';en = 'Unfortunately, working in the web client is not possible';ru = 'К сожалению, работа в веб-клиенте невозможна'"));
		КонецЕсли;
#КонецЕсли

	КонецЕсли
	;

КонецПроцедуры

Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(ДопПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, ДопПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры

Процедура АктивироватьДополнительныеФункции(Форма)

	Форма.Элементы.ПроизвольныйКодКонструкторЗапроса.Доступность = Истина;
	Форма.Элементы.ПроизвольныйКодБыстрыеПодсказки.Доступность = Истина;

	УправлениеБыстрымиПодсказками(Форма);

КонецПроцедуры

Процедура ОбнулитьМетаданные(Форма) Экспорт

	View(Форма).clearMetadata();
	ОбновитьСписокОбщихМодулей(Форма);

КонецПроцедуры

Процедура ИнициализацияРедактора(Форма)

	Инфо = Новый СистемнаяИнформация;

	View(Форма).init(Инфо.ВерсияПриложения);
	View(Форма).setOption("autoResizeEditorLayout", Истина);
	View(Форма).setOption("renderQueryDelimiters", Истина);
	View(Форма).setOption("generateModificationEvent", Истина);
	View(Форма).hideScrollX();
	View(Форма).hideScrollY();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора

Процедура ОбработатьСобытиеРедактора(Форма, Событие)

	Если Событие <> Неопределено Тогда

		ИмяСобытия = Событие.event;

		Если ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
			ВызватьКонструкторЗапроса(Форма, Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
			ВызватьКонструкторФорматнойСтроки(Форма, Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_GET_METADATA" Тогда
			ОбработкаСобытияПолученияМетаданных(Форма, Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;

		Если ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
			Если 0 < СтрНайти(Событие.params.href, "e1cib") Тогда
				ПерейтиПоНавигационнойСсылке(Событие.params.href);
			КонецЕсли;
		КонецЕсли;

		Если ИмяСобытия = "EVENT_GET_VARIABLE_DATA" Тогда
			ОбработкаСобытияПолученияПеременной(Форма, Событие.params);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

Функция View(Форма) Экспорт

	Возврат Форма.Элементы[Форма.ИмяПоляHTML].Документ.defaultView;

КонецФункции

Функция ПолучитьКодПросмотраПеременных(Форма)

	Код = "";

	Если 0 < Форма.ПоказыватьЗначенияПеременныхПослеВыполнения Тогда

		Переменные = View(Форма).getVarsNames();

		Если 0 < Переменные.length Тогда

			СимволПС = Символы.ПС;

			Для Индекс = 0 По Переменные.length - 1 Цикл
				Имя = Переменные["" + Индекс + ""];
				Код = Код + СимволПС + "Попытка SPd201bf6.Вставить(""" + Имя + """,Вычислить(""" + Имя
					+ """)); Исключение КонецПопытки;" + СимволПС;
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Код;

КонецФункции

#КонецОбласти

#Область ВыполнениеКода

Функция ПолучитьОшибку(ОписаниеОшибки)

	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);

	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");

	Если 0 < ПозицияРазделителя Тогда

		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));

		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");

		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);

		НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1));
		НомерСтроки = ?(НомерСтроки <> 0 И Не ПустаяСтрока(НомерСтроки), НомерСтроки, 0);

		НомерКолонки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2));
		НомерКолонки = ?(НомерКолонки <> 0 И Не ПустаяСтрока(НомерКолонки), НомерКолонки, 1);

		Ошибка.НомерСтроки = НомерСтроки;
		Ошибка.НомерКолонки = НомерКолонки;

	КонецЕсли;

	Возврат Ошибка;

КонецФункции

Функция НайтиСтрокуВКоде(Форма, Строка)

	НомерСтроки = View(Форма).findText(Строка);

	Возврат НомерСтроки;

КонецФункции

Функция ИзвлечьНомерСтрокиИзОписанияОшибки(ОписаниеОшибки)

	НомерСтроки = 0;
	ОткрывающаяСкобка = СтрНайти(ОписаниеОшибки, "(");

	Если 0 < ОткрывающаяСкобка Тогда

		ЗакрывающаяСкобка = СтрНайти(ОписаниеОшибки, ")", , ОткрывающаяСкобка);

		Если 0 < ЗакрывающаяСкобка Тогда

			Позиция = Сред(ОписаниеОшибки, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
			Подстроки = СтрРазделить(Позиция, ",");

			Попытка
				НомерСтроки = Число(Подстроки[0]);
			Исключение
				НомерСтроки = 0;
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Возврат НомерСтроки;

КонецФункции

#КонецОбласти

#Область КонструкторЗапросов

Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт

	Если Текст <> Неопределено Тогда

		Форма = ДопПараметры.Форма;

		ВнешнийОбъект = Неопределено;
		ДопПараметры.Свойство("ВнешнийОбъект", ВнешнийОбъект);

		Если Не View(Форма).queryMode Тогда
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;

		УстановитьТекст(Форма, Текст, ВнешнийОбъект, Истина);

	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)

	Конструктор = Новый КонструкторЗапроса;

	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст = Текст;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение( , НСтр(
				"az = 'Sorğu mətnində səhv:';en = 'Error in the query text:';ru = 'Ошибка в тексте запроса:'")
				+ Символы.ПС + Инфо.Причина.Описание);
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);

КонецПроцедуры

Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", ДопПараметры);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТекстЗапроса(Текст)

	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");

	Возврат ТекстЗапроса;

КонецФункции

Процедура ВызватьКонструкторЗапроса(Форма, ПараметрыЗапроса) Экспорт

	Если ПараметрыЗапроса = Неопределено Тогда
		ДопПараметры = Новый Структура("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = НСтр("az = 'Sorğu mətn tapılmadı.
							|
							|Yeni bir sorğu yaratmaq istəyirsiniz?';en = 'Query text not found.
							|Would you like to create a new query?';ru = 'Не найден текст запроса.
							|Создать новый запрос?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ДопПараметры = Новый Структура("Форма, ВнешнийОбъект", Форма, ПараметрыЗапроса.range);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ДопПараметры);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт

	Если ФорматнаяСтрока <> Неопределено Тогда
		Форма = ДопПараметры.Форма;
		ВнешнийОбъект = Неопределено;
		ДопПараметры.Свойство("ВнешнийОбъект", ВнешнийОбъект);
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(Форма, ФорматнаяСтрока, ВнешнийОбъект, Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)

	Конструктор = Новый КонструкторФорматнойСтроки;
	Попытка
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение( , НСтр(
			"az = 'Format sətrinin mətnində səhv:';en = 'Error in the format string text:';ru = 'Ошибка в тексте форматной строки:'")
			+ Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;

	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);

КонецПроцедуры

Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", ДопПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура ВызватьКонструкторФорматнойСтроки(Форма, ПараметрыСтроки)

	Если ПараметрыСтроки = Неопределено Тогда
		ДопПараметры = Новый Структура("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = НСтр("az = 'Format sətri tapılmadı.
							|Yeni bir format sətri yaratmaq istəyirsiniz?';en = 'Format string not found.
							|Would you like to create a new format string?';ru = 'Форматная строка не найдена.
							|Создать новую форматную строку?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ДопПараметры = Новый Структура("Форма, ВнешнийОбъект", Форма, ПараметрыСтроки.range);
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла, РазделительПути)

#Если Не ВебКлиент Тогда

	СмещениеИмениВПути = 3;

	Путь = СтрРазделить(ПолноеИмяФайла, РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];

	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();

	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);

#Иначе

		Возврат Новый Структура("Имя, Текст", "", "");

#КонецЕсли

КонецФункции

Процедура ВопросЗагрузкиОбщихМодулейЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда

		Форма = ДопПараметры.Форма;

		Состояние(НСтр(
			"az = 'Ümumi modullar yüklənir...';en = 'Loading common modules...';ru = 'Загрузка общих модулей...'"));
		Файлы = НайтиФайлы(ДопПараметры.КаталогМодулей, "Ext" + Форма.РазделительПути + "*.bsl", Истина);

		Для Каждого Файл Из Файлы Цикл
			ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя, Форма.РазделительПути);
			View(Форма).parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
		КонецЦикла;

		Состояние(НСтр(
			"az = 'Ümumi modullar yükləndi';en = 'Common modules have been loaded';ru = 'Общие модули загружены'"));

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьСписокОбщихМодулей(Форма)

	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(Форма.АдресОбщихМодулей);

	Если КоллекцияМетаданных <> Неопределено Тогда
		View(Форма).updateMetadata(КоллекцияМетаданных, "commonModules.items");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

Функция ЗагрузитьОбъектМетаданныхПоЗапросу(Форма, ПараметрыЗапроса)

	АдресОбновления = "";
	ОписаниеМетаданных = УБТ_КонсольКодаВызовСервера.ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса,
		АдресОбновления);

	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда

		Если ТипЗнч(View(Форма).updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ЗагрузитьСписокМетаданныхПоЗапросу(Форма, ПараметрыЗапроса)

	АдресОбновления = "";
	ОписаниеМетаданных = УБТ_КонсольКодаВызовСервера.ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);

	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда

		Если ТипЗнч(View(Форма).updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Процедура ОбработкаСобытияПолученияМетаданных(Форма, Событие)

	ПараметрыЗапроса = НРег(Событие.metadata);
	ДанныеОбновлены = Ложь;

	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда

		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");

		Если ЧастиЗапроса[0] <> "module" Тогда

			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(Форма, ПараметрыЗапроса);

		КонецЕсли;

	Иначе

		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(Форма, ПараметрыЗапроса);

	КонецЕсли;

	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		View(Форма).triggerSuggestions();
	КонецЕсли;

	Если Событие.trigger = "snippet" Тогда
		View(Форма).updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаСобытияПолученияПеременной(Форма, Событие)

	ИмяПеременной = Событие.variableName;
	ИдентификаторПеременной = Событие.variableId;

	ПутьКДанным = Событие.variablePath;
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "undefined", "");

	Описание = УБТ_КонсольКодаВызовСервера.ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной,
		ПутьКДанным, Форма.АдресХраненияПеременных);

	Если ЗначениеЗаполнено(Описание) Тогда
		View(Форма).updateVariableDescription(ИдентификаторПеременной, Описание);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт

	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль(ДопПараметры.Форма, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиОшибку(Форма, Текст, ЗакрыватьКонсоль)

	ПараметрыОповещения = Новый Структура("Форма, ЗакрыватьКонсоль", Форма, ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);

КонецПроцедуры

Процедура УправлениеБыстрымиПодсказками(Форма)

	Форма.Элементы.ПроизвольныйКодБыстрыеПодсказки.Пометка = Форма.БыстрыеПодсказки;

КонецПроцедуры

Функция ВебДокументДоступен(Форма)

	Если Форма.Элементы[Форма.ИмяПоляHTML].Документ <> Неопределено
		И Форма.Элементы[Форма.ИмяПоляHTML].Документ.defaultView <> Неопределено Тогда
		Попытка
			ТекстHTMLПоля(Форма);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ОпределитьРазделительПути(Форма)

	Форма.РазделительПути = ПолучитьРазделительПути();

КонецПроцедуры

Процедура ПослеУдаленияИндексногоФайла(Форма, ДопПараметры) Экспорт

	Форма.ИндексныйФайл = "";

	Если ДопПараметры.СтандартноеЗакрытие Тогда
		Форма.Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура ЗакрытьКонсоль(Форма, СтандартноеЗакрытие)

	Если ЗначениеЗаполнено(Форма.ИндексныйФайл) Тогда
		ПараметрыОповещения = Новый Структура("СтандартноеЗакрытие", СтандартноеЗакрытие);
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект, ПараметрыОповещения);
		НачатьУдалениеФайлов(Оповещение, Форма.ИндексныйФайл);
	Иначе
		Если СтандартноеЗакрытие Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти