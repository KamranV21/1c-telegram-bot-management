#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	НастроитьЭлементыРегламентногоЗадания();
	УстановитьНадписьРасписания();

	ИнициализироватьКомандыБота();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ВосстановитьТокен();

	ИнициализироватьРегламентноеЗадание(ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийОбъект.ВключитьОтключитьРегламентноеЗадание(РасписаниеРегламентногоЗадания);

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ЗаписатьКомандыБота();

	СохранитьТокенНаСервере(ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ИнициализироватьКомандыБота();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантВзаимодействияПриИзменении(Элемент)

	НастроитьЭлементыРегламентногоЗадания();

КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбменаССайтомПриИзменении(Элемент)

	УстановитьРасписаниеРегламентногоЗадания();
	УстановитьНадписьРасписания();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомандыБотов

&НаКлиенте
Процедура КомандыБотовПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписание(Команда)

	ВыполнитьНастройкуРасписания();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьРегламентноеЗадание(Знач ТекущийОбъект)

	Задание = ТекущийОбъект.СуществующееЗадание();

	Если Не Задание = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Задание.Расписание;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписания()

	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписание", ЭтотОбъект);

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания = Результат;

		УстановитьНадписьРасписания();

		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыРегламентногоЗадания()

	ИспользоватьРегламентноеЗадание = Объект.ВариантВзаимодействия
		= Перечисления.TBM_ВариантыВзаимодействияСБотамиTelegram.РегламентноеЗадание;

	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ГруппаАвтообменСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтообменСтраница;
		Элементы.НастроитьРасписание.Доступность = ИспользоватьРегламентноеЗадание;
	Иначе
		Элементы.ГруппаАвтообменСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтообменСтраницаИнтервал;
		Элементы.ИнтервалОбмена.Доступность = ИспользоватьРегламентноеЗадание;
	КонецЕсли;

	Элементы.ПользовательРегламентногоЗадания.Доступность = ИспользоватьРегламентноеЗадание;

КонецПроцедуры

&НаКлиенте
// Заполняет значения расписания регламентного задания.
//
Процедура УстановитьРасписаниеРегламентногоЗадания()

	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);

	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);

	ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня();

	Если ПериодПовтораВТечениеДня > 0 Тогда

		Расписание = Новый РасписаниеРегламентногоЗадания;
		//@skip-check bsl-legacy-check-dynamic-feature-access
		Расписание.Месяцы = Месяцы;
		//@skip-check bsl-legacy-check-dynamic-feature-access
		Расписание.ДниНедели = ДниНедели;
		//@skip-check bsl-legacy-check-dynamic-feature-access
		Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня; // секунды
		//@skip-check bsl-legacy-check-dynamic-feature-access
		Расписание.ПериодПовтораДней = 1; // каждый день

		РасписаниеРегламентногоЗадания = Расписание;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Функция возвращает соответствие надписей выбора к количеству секунд
// 
Функция СоответствиеЗначенийВыбораККоличествуСекунд()

	СоответствиеНадписей = Новый Соответствие;
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 5 minutes'; ru = 'Один раз в 5 минут'; az = 'Bir dəfə hər 5 dəqiqə'"), 300);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 15 minutes'; ru = 'Один раз в 15 минут'; az = 'Bir dəfə hər 15 dəqiqə'"), 900);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 30 minutes'; ru = 'Один раз в 30 минут'; az = 'Bir dəfə hər 30 dəqiqə'"), 1800);
	СоответствиеНадписей.Вставить(НСтр("en = 'Once every hour'; ru = 'Один раз каждый час'; az = 'Bir dəfə hər saat'"),
		3600);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 3 hour'; ru = 'Один раз в 3 часа'; az = 'Bir dəfə hər 3 saat'"), 10800);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 6 hour'; ru = 'Один раз в 6 часов'; az = 'Bir dəfə hər 6 saat'"), 21600);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 12 hour'; ru = 'Один раз в 12 часов'; az = 'Bir dəfə hər 12 saat'"), 43200);

	Возврат СоответствиеНадписей;

КонецФункции

&НаКлиенте
// Функция возвращает ПериодПовтораВТечениеДня в секундах
//
Функция ПериодПовтораВТечениеДня()

	ЗначенияВыбора = СоответствиеЗначенийВыбораККоличествуСекунд();

	ПериодПовтораВТечениеДня = ЗначенияВыбора.Получить(ИнтервалОбмена);
	Возврат ?(ПериодПовтораВТечениеДня = Неопределено, 1800, ПериодПовтораВТечениеДня);

КонецФункции

&НаСервере
Процедура УстановитьНадписьРасписания()

	Если Не ОбщегоНазначения.РазделениеВключено() Тогда

		Если РасписаниеРегламентногоЗадания = Неопределено Тогда
			ТекстЗаголовка = НСтр("en = 'Set up a schedule'; ru = 'Настроить расписание'; az = 'Cədvəli qurmaq'");
		Иначе
			ТекстЗаголовка = РасписаниеРегламентногоЗадания;
		КонецЕсли;

		Элементы.НастроитьРасписание.Заголовок = ТекстЗаголовка;

	Иначе

		Если РасписаниеРегламентногоЗадания = Неопределено Тогда

			ИнтервалОбмена = НСтр(
				"en = 'Once every 30 minutes'; ru = 'Один раз в 30 минут'; az = 'Bir dəfə hər 30 dəqiqə'");

		Иначе

			ЗначениеПериода = РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня;
			Если ЗначениеПериода = 0 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 30 minutes'; ru = 'Один раз в 30 минут'; az = 'Bir dəfə hər 30 dəqiqə'");

			ИначеЕсли ЗначениеПериода <= 300 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 5 minutes'; ru = 'Один раз в 5 минут'; az = 'Bir dəfə hər 5 dəqiqə'");

			ИначеЕсли ЗначениеПериода <= 900 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 15 minutes'; ru = 'Один раз в 15 минут'; az = 'Bir dəfə hər 15 dəqiqə'");

			ИначеЕсли ЗначениеПериода <= 1800 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 30 minutes'; ru = 'Один раз в 30 минут'; az = 'Bir dəfə hər 30 dəqiqə'");

			ИначеЕсли ЗначениеПериода <= 3600 Тогда

				ИнтервалОбмена = НСтр("en = 'Once every hour'; ru = 'Один раз в час'; az = 'Bir dəfə hər saat'");

			ИначеЕсли ЗначениеПериода <= 10800 Тогда

				ИнтервалОбмена = НСтр("en = 'Once every 3 hour'; ru = 'Один раз в 3 часа'; az = 'Bir dəfə hər 3 saat'");

			ИначеЕсли ЗначениеПериода <= 21600 Тогда

				ИнтервалОбмена = НСтр("en = 'Once every 6 hour'; ru = 'Один раз в 6 часов'; az = 'Bir dəfə hər 6 saat'");
			ИначеЕсли ЗначениеПериода <= 43200 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 12 hour'; ru = 'Один раз в 12 часов'; az = 'Bir dəfə hər 12 saat'");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомандыБота()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Элементы.СтраницаКоманды.Видимость = Ложь;

	Иначе

		Элементы.СтраницаКоманды.Видимость = Истина;

		НаборЗаписей = РегистрыСведений.TBM_КомандыБотовTelegram.СоздатьНаборЗаписей();

		НаборЗаписей.Отбор.Бот.Значение = Объект.Ссылка;
		НаборЗаписей.Отбор.Бот.ВидСравнения = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Бот.Использование = Истина;

		НаборЗаписей.Отбор.Чат.Значение = Справочники.TBM_ЧатыTelegram.ПустаяСсылка();
		НаборЗаписей.Отбор.Чат.ВидСравнения = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Чат.Использование = Истина;

		НаборЗаписей.Прочитать();

		ЗначениеВРеквизитФормы(НаборЗаписей, "КомандыБотов");

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьКомандыБота()

	НаборЗаписей = РеквизитФормыВЗначение("КомандыБотов");

	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Бот = Объект.Ссылка;
	КонецЦикла;

	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьТокен()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Токен = TBM_РаботаСБотамиTelegram.ТокенБотаTelegram(Объект.Ссылка);

КонецПроцедуры

&НаСервере
Функция СохранитьТокенНаСервере(ТекущийОбъект)

	Результат = Истина;

	ИдентификаторБота = Справочники.TBM_БотыTelegram.ИдентификаторЭлементаБотаСПрефиксом(ТекущийОбъект.Ссылка);

	УстановитьПривилегированныйРежим(Истина);

	Попытка
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторБота, Токен);
	Исключение
		Результат = Ложь;
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;

КонецФункции

#КонецОбласти