#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОпределитьДоступностьЭлементаДляРедактирования();

	УстановитьВидимостьЭлементовПоТипуДействия();

	ОпределитьДоступныеРасширенияОтчетов();
	ЗаполнитьПредставлениеРасширенийОтчетов();

	НастроитьЭлементыРегламентногоЗадания();
	УстановитьНадписьРасписания();

	ОпределитьИмяПоляHTML();
	КонсольКодаПриСозданииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	КонсольКодаПриОткрытии();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ИнициализироватьРегламентноеЗадание(ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Объект.ТипСценария <> Перечисления.УБТ_ТипыСценариевБотовTelegram.ОтправкаОтчета Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаТабличнойЧасти Из Объект.Отчеты Цикл

		СтруктураПоиска = Новый Структура("УникальныйИдентификатор", СтрокаТабличнойЧасти.УникальныйИдентификатор);
		НайденныеРасширения = Объект.РасширенияОтчетов.НайтиСтроки(СтруктураПоиска);

		Если НайденныеРасширения.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;

		ТекстСообщения = НСтр(
			"az = 'Hesabatın göndərilməsi üçün ən azı bir genişləndirməni göstərin.';en = 'Specify at least one extension in which the report should be sent.';ru = 'Укажите как минимум одно расширение, в котором следует отправить отчет.'");
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Отчеты", СтрокаТабличнойЧасти.НомерСтроки,
			"Расширения");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	УстановитьПривилегированныйРежим(Истина);

	ТекущийОбъект.ВключитьОтключитьРегламентноеЗадание(РасписаниеРегламентногоЗадания);

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьПредставлениеРасширенийОтчетов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДействияПриИзменении(Элемент)

	УстановитьВидимостьЭлементовПоТипуДействия();
	ОпределитьИмяПоляHTML();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеПриИзменении(Элемент)

	НастроитьЭлементыРегламентногоЗадания();

КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбменаССайтомПриИзменении(Элемент)

	УстановитьРасписаниеРегламентногоЗадания();
	УстановитьНадписьРасписания();

КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйКодДокументСформирован(Элемент)

	ConsoleOnReady(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйКодПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтчеты

&НаКлиенте
Процедура ОтчетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Или Копирование Тогда

		ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
		ТекущиеДанные.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередУдалением(Элемент, Отказ)

	Для Каждого ИдентификаторСтроки Из Элементы.Отчеты.ВыделенныеСтроки Цикл
		СтрокаТаблицыОтчетов = Объект.Отчеты.НайтиПоИдентификатору(ИдентификаторСтроки);
		УдалитьРасширенияОтчета(СтрокаТаблицыОтчетов.УникальныйИдентификатор);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыРасширенияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;

	ВыбратьРасширенияОтчета(ТекущиеДанные.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыРасширенияОчистка(Элемент, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;

	УдалитьРасширенияОтчета(ТекущиеДанные.УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура ЭтапыПриАктивизацииСтроки(Элемент)

	УстановитьОтборыПоЭтапуОбщения();

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Или Копирование Тогда

		ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
		ТекущиеДанные.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);

		УстановитьОтборыПоЭтапуОбщения();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалением(Элемент, Отказ)

	Для Каждого ИдентификаторСтроки Из Элементы.Этапы.ВыделенныеСтроки Цикл
		СтрокаТаблицыЭтапов = Объект.Этапы.НайтиПоИдентификатору(ИдентификаторСтроки);
		УдалитьКнопкиКлавиатурыЭтапа(СтрокаТаблицыЭтапов.УникальныйИдентификатор);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКнопкиКлавиатуры

&НаКлиенте
Процедура КнопкиКлавиатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)

	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КнопкиКлавиатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанныеЭтапов = Элементы.Этапы.ТекущиеДанные;
	ТекущиеДанные = Элементы.КнопкиКлавиатуры.ТекущиеДанные;

	Если ТекущиеДанныеЭтапов = Неопределено Или ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.УникальныйИдентификатор = ТекущиеДанныеЭтапов.УникальныйИдентификатор;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьОдноразовыйПароль(Команда)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр(
			"az = 'Dəyişiklikləri əvvəlcədən qeyd edin.';en = 'Save the changes first.';ru = 'Предварительно сохраните изменения.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Сценарий", Объект.Ссылка);

	ОткрытьФорму("РегистрСведений.УБТ_ОдноразовыеПаролиАвторизацииЧатовTelegram.Форма.ОдноразовыйПароль",
		ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)

	ВыполнитьНастройкуРасписания();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКод(Команда)

	Код = ТекстHTMLПоля(Истина);
	Результат = ВыполнитьКодНаСервере(Код, ПоказыватьЗначенияПеременныхПослеВыполнения);
	ОбработатьРезультатВыполнения(Результат);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасширенияОтчетов

&НаКлиенте
Процедура ВыбратьРасширенияОтчета(ИдентификаторОтчета)

	СтруктураПоиска = Новый Структура("УникальныйИдентификатор", ИдентификаторОтчета);

	Найденные = Объект.РасширенияОтчетов.НайтиСтроки(СтруктураПоиска);

	ДоступныеРасширенияОтчетов.ЗаполнитьПометки(Ложь);
	Если Найденные.Количество() > 0 Тогда
		Для Каждого СтрокаРасширение Из Найденные Цикл
			ЭлементРасширения = ДоступныеРасширенияОтчетов.НайтиПоЗначению(СтрокаРасширение.Расширение);
			Если ЭлементРасширения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЭлементРасширения.Пометка = Истина;
		КонецЦикла;
	КонецЕсли;

	ЗаголовокДиалога = НСтр(
		"az = 'Hesabat genişləndirmələri seçin';en = 'Select report extensions';ru = 'Выберите расширения отчета'");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторОтчета", ИдентификаторОтчета);

	Обработчик = Новый ОписаниеОповещения("ВыбратьРасширенияОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ДоступныеРасширенияОтчетов.ПоказатьОтметкуЭлементов(Обработчик, ЗаголовокДиалога);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРасширенияОтчетаЗавершение(ВыбранныеРасширения, ДополнительныеПараметры) Экспорт

	Если ВыбранныеРасширения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторОтчета = ДополнительныеПараметры.ИдентификаторОтчета;
	УдалитьРасширенияОтчета(ИдентификаторОтчета);

	ПредставлениеВыбранныхРасширений = "";

	Для Каждого ЭлементРасширения Из ВыбранныеРасширения Цикл

		Если Не ЭлементРасширения.Пометка Тогда
			Продолжить;
		КонецЕсли;

		СтрокаФормат = Объект.РасширенияОтчетов.Добавить();
		СтрокаФормат.УникальныйИдентификатор  = ИдентификаторОтчета;
		СтрокаФормат.Расширение = ЭлементРасширения.Значение;
		ПредставлениеВыбранныхРасширений = ПредставлениеВыбранныхРасширений + ?(ПредставлениеВыбранныхРасширений = "",
			"", ", ") + ЭлементРасширения.Представление;

	КонецЦикла;

	СтруктураПоиска = Новый Структура("УникальныйИдентификатор", ИдентификаторОтчета);
	НайденныеСтроки = Объект.Отчеты.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 1 Тогда
		НайденныеСтроки[0].Расширения = ПредставлениеВыбранныхРасширений;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьРасширенияОтчета(ИдентификаторОтчета)

	Модифицированность = Истина;

	СтруктураПоиска = Новый Структура("УникальныйИдентификатор", ИдентификаторОтчета);

	НайденныеРасширения = Объект.РасширенияОтчетов.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаРасширение Из НайденныеРасширения Цикл
		Объект.РасширенияОтчетов.Удалить(СтрокаРасширение);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеРасширенийОтчетов()

	Для Каждого СтрокаОтчета Из Объект.Отчеты Цикл

		СтруктураПоиска = Новый Структура("УникальныйИдентификатор", СтрокаОтчета.УникальныйИдентификатор);

		ПредставлениеВыбранныхРасширений = "";

		НайденныеРасширения = Объект.РасширенияОтчетов.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаРасширение Из НайденныеРасширения Цикл

			ЭлементРасширения = ДоступныеРасширенияОтчетов.НайтиПоЗначению(СтрокаРасширение.Расширение);
			Если ЭлементРасширения = Неопределено Тогда
				Возврат;
			КонецЕсли;

			ПредставлениеВыбранныхРасширений = ПредставлениеВыбранныхРасширений + ?(ПредставлениеВыбранныхРасширений
				= "", "", ", ") + ЭлементРасширения.Представление;

		КонецЦикла;

		СтрокаОтчета.Расширения = ПредставлениеВыбранныхРасширений;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступныеРасширенияОтчетов()

	ДоступныеРасширенияОтчетов = Новый СписокЗначений;

	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "HTML");
	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "PDF");
	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "XLSX");
	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "XLS");
	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "ODS");
	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "MXL");
	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "DOCX");
	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "TXT");
	УстановитьПараметрыФормата(ДоступныеРасширенияОтчетов, "ANSITXT");

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФормата(СписокФорматов, Расширение, Картинка = Неопределено,
	ИспользоватьПоУмолчанию = Неопределено)

	ЭлементСписка = СписокФорматов.НайтиПоЗначению(Расширение);

	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка = СписокФорматов.Добавить(Расширение, Расширение, Ложь, БиблиотекаКартинок.ФорматПустой);
	КонецЕсли;

	Если Картинка <> Неопределено Тогда
		ЭлементСписка.Картинка = Картинка;
	КонецЕсли;

	Если ИспользоватьПоУмолчанию <> Неопределено Тогда
		ЭлементСписка.Пометка = ИспользоватьПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЭтапыОбщения

&НаКлиенте
Процедура УстановитьОтборыПоЭтапуОбщения()

	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.КнопкиКлавиатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("УникальныйИдентификатор",
		ТекущиеДанные.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьКнопкиКлавиатурыЭтапа(ИдентификаторЭтапа)

	НайденныеСтроки = Объект.КнопкиКлавиатуры.НайтиСтроки(Новый Структура("УникальныйИдентификатор",
		ИдентификаторЭтапа));

	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.КнопкиКлавиатуры.Удалить(НайденнаяСтрока);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Расписание

&НаСервере
Процедура ИнициализироватьРегламентноеЗадание(Знач ТекущийОбъект)

	Задание = ТекущийОбъект.СуществующееЗадание();

	Если Не Задание = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Задание.Расписание;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписания()

	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписание", ЭтотОбъект);

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания = Результат;

		УстановитьНадписьРасписания();

		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыРегламентногоЗадания()

	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ГруппаАвтообменСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтообменСтраница;
	Иначе
		Элементы.ГруппаАвтообменСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтообменСтраницаИнтервал;
	КонецЕсли;

	Элементы.НастроитьРасписание.Доступность = Объект.ИспользоватьРегламентноеЗадание;
	Элементы.ИнтервалОбмена.Доступность = Объект.ИспользоватьРегламентноеЗадание;
	Элементы.ПользовательРегламентногоЗадания.Доступность = Объект.ИспользоватьРегламентноеЗадание;
	Элементы.Чаты.Видимость = Объект.ИспользоватьРегламентноеЗадание;

КонецПроцедуры

&НаКлиенте
// Заполняет значения расписания регламентного задания.
//
Процедура УстановитьРасписаниеРегламентногоЗадания()

	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);

	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);

	ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня();

	Если ПериодПовтораВТечениеДня > 0 Тогда

		Расписание = Новый РасписаниеРегламентногоЗадания;
		//@skip-check bsl-legacy-check-dynamic-feature-access
		Расписание.Месяцы = Месяцы;
		//@skip-check bsl-legacy-check-dynamic-feature-access
		Расписание.ДниНедели = ДниНедели;
		//@skip-check bsl-legacy-check-dynamic-feature-access
		Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня; // секунды
		//@skip-check bsl-legacy-check-dynamic-feature-access
		Расписание.ПериодПовтораДней = 1; // каждый день

		РасписаниеРегламентногоЗадания = Расписание;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Функция возвращает соответствие надписей выбора к количеству секунд
// 
Функция СоответствиеЗначенийВыбораККоличествуСекунд()

	СоответствиеНадписей = Новый Соответствие;
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 5 minutes'; ru = 'Один раз в 5 минут'; az = 'Bir dəfə hər 5 dəqiqə'"), 300);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 15 minutes'; ru = 'Один раз в 15 минут'; az = 'Bir dəfə hər 15 dəqiqə'"), 900);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 30 minutes'; ru = 'Один раз в 30 минут'; az = 'Bir dəfə hər 30 dəqiqə'"), 1800);
	СоответствиеНадписей.Вставить(НСтр("en = 'Once every hour'; ru = 'Один раз каждый час'; az = 'Bir dəfə hər saat'"),
		3600);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 3 hour'; ru = 'Один раз в 3 часа'; az = 'Bir dəfə hər 3 saat'"), 10800);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 6 hour'; ru = 'Один раз в 6 часов'; az = 'Bir dəfə hər 6 saat'"), 21600);
	СоответствиеНадписей.Вставить(НСтр(
		"en = 'Once every 12 hour'; ru = 'Один раз в 12 часов'; az = 'Bir dəfə hər 12 saat'"), 43200);

	Возврат СоответствиеНадписей;

КонецФункции

&НаКлиенте
// Функция возвращает ПериодПовтораВТечениеДня в секундах
//
Функция ПериодПовтораВТечениеДня()

	ЗначенияВыбора = СоответствиеЗначенийВыбораККоличествуСекунд();

	ПериодПовтораВТечениеДня = ЗначенияВыбора.Получить(ИнтервалОбмена);
	Возврат ?(ПериодПовтораВТечениеДня = Неопределено, 1800, ПериодПовтораВТечениеДня);

КонецФункции

&НаСервере
Процедура УстановитьНадписьРасписания()

	Если Не ОбщегоНазначения.РазделениеВключено() Тогда

		Если РасписаниеРегламентногоЗадания = Неопределено Тогда
			ТекстЗаголовка = НСтр("en = 'Set up a schedule'; ru = 'Настроить расписание'; az = 'Cədvəli qurmaq'");
		Иначе
			ТекстЗаголовка = РасписаниеРегламентногоЗадания;
		КонецЕсли;

		Элементы.НастроитьРасписание.Заголовок = ТекстЗаголовка;

	Иначе

		Если РасписаниеРегламентногоЗадания = Неопределено Тогда

			ИнтервалОбмена = НСтр(
				"en = 'Once every 30 minutes'; ru = 'Один раз в 30 минут'; az = 'Bir dəfə hər 30 dəqiqə'");

		Иначе

			ЗначениеПериода = РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня;
			Если ЗначениеПериода = 0 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 30 minutes'; ru = 'Один раз в 30 минут'; az = 'Bir dəfə hər 30 dəqiqə'");

			ИначеЕсли ЗначениеПериода <= 300 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 5 minutes'; ru = 'Один раз в 5 минут'; az = 'Bir dəfə hər 5 dəqiqə'");

			ИначеЕсли ЗначениеПериода <= 900 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 15 minutes'; ru = 'Один раз в 15 минут'; az = 'Bir dəfə hər 15 dəqiqə'");

			ИначеЕсли ЗначениеПериода <= 1800 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 30 minutes'; ru = 'Один раз в 30 минут'; az = 'Bir dəfə hər 30 dəqiqə'");

			ИначеЕсли ЗначениеПериода <= 3600 Тогда

				ИнтервалОбмена = НСтр("en = 'Once every hour'; ru = 'Один раз в час'; az = 'Bir dəfə hər saat'");

			ИначеЕсли ЗначениеПериода <= 10800 Тогда

				ИнтервалОбмена = НСтр("en = 'Once every 3 hour'; ru = 'Один раз в 3 часа'; az = 'Bir dəfə hər 3 saat'");

			ИначеЕсли ЗначениеПериода <= 21600 Тогда

				ИнтервалОбмена = НСтр("en = 'Once every 6 hour'; ru = 'Один раз в 6 часов'; az = 'Bir dəfə hər 6 saat'");
			ИначеЕсли ЗначениеПериода <= 43200 Тогда

				ИнтервалОбмена = НСтр(
					"en = 'Once every 12 hour'; ru = 'Один раз в 12 часов'; az = 'Bir dəfə hər 12 saat'");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонсольКода

#Область СобытияФормы

&НаСервере
Процедура КонсольКодаПриСозданииНаСервере()

	ИсходникиКонсолиКода = ПолучитьОбщийМакет("УБТ_ИсходникиКонсолиКода");

	АдресМакета = ПоместитьВоВременноеХранилище(ИсходникиКонсолиКода, Новый УникальныйИдентификатор);

	КоллекцияОбщихМодулей = ПолучитьКоллекциюОбщихМодулей();
	АдресОбщихМодулей = СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей);

	БыстрыеПодсказки = Истина;

КонецПроцедуры

&НаКлиенте
Процедура КонсольКодаПриОткрытии()

	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	ОпределитьРазделительПути();

КонецПроцедуры

#КонецОбласти
#Область ИнициализацияРедактора

&НаКлиенте
Функция ИндексныйФайл()

	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";

КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт

	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт

#Если Не ВебКлиент Тогда

	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "tbm_bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + "tbm.ver");
		Файл.ЗаписатьСтроку(ОбщегоНазначенияКлиент.ДатаСеанса());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект);
	ИмяФайла = КаталогИсходников + "tbm_bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()

	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект);
	НачатьУдалениеФайлов(Оповещение, КаталогИсходников, "*.*");

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт

	Если Существует Тогда
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт

	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт

	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "tbm.ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт

	КаталогИсходников = ИмяКаталога + "tbm_bsl_console\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);

КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()

#Если ВебКлиент Тогда
	HTML = "https://salexdv.github.io/bsl_console/src/index.html";
	ИсходникиЗагружены = Истина;
#Иначе
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт

	Если Подключено Тогда

		ИзвлечьИсходники();

	Иначе

#Если ВебКлиент Тогда
		Если ДопПараметры = Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтотОбъект);
			НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
		Иначе
			ПоказатьПредупреждение( , "К сожалению работа в веб-клиенте невозможна!");
		КонецЕсли;
#КонецЕсли

	КонецЕсли
	;

КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(ДопПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, Истина);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура АктивироватьДополнительныеФункции()

	Элементы.ПроизвольныйКодКонструкторЗапроса.Доступность = Истина;
	Элементы.ПроизвольныйКодБыстрыеПодсказки.Доступность = Истина;

	УправлениеБыстрымиПодсказками();

КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданные() Экспорт

	View().clearMetadata();
	ОбновитьСписокОбщихМодулей();

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()

	Инфо = Новый СистемнаяИнформация;

	View().init(Инфо.ВерсияПриложения);
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().setOption("generateModificationEvent", Истина);
	View().hideScrollX();
	View().hideScrollY();

	ПодключитьОбработчикОжидания("ОбнулитьМетаданные", 1, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ConsoleOnReady(Элемент)

	Если ИсходникиЗагружены Тогда

		ДокументЗагружен = Истина;

#Если ВебКлиент Тогда
		Если ВебДокументДоступен() Тогда
			ИнициализацияРедактора();
			АктивироватьДополнительныеФункции();
		Иначе
			ПоказатьПредупреждение( , "К сожалению, в веб-клиенте недоступны практически все функции.
									  |Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
		КонецЕсли;
#Иначе
			ИнициализацияРедактора();
			АктивироватьДополнительныеФункции();
#КонецЕсли

	КонецЕсли
	;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие)

	Если Событие <> Неопределено Тогда

		ИмяСобытия = Событие.event;

		Если ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
			ВызватьКонструкторЗапроса(Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
			ВызватьКонструкторФорматнойСтроки(Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_GET_METADATA" Тогда
			ОбработкаСобытияПолученияМетаданных(Событие.params);
		КонецЕсли;

		Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
			Модифицированность = Истина;
		КонецЕсли;

		Если ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
			Если 0 < СтрНайти(Событие.params.href, "e1cib") Тогда
				ПерейтиПоНавигационнойСсылке(Событие.params.href);
			КонецЕсли;
		КонецЕсли;

		Если ИмяСобытия = "EVENT_GET_VARIABLE_DATA" Тогда
			ОбработкаСобытияПолученияПеременной(Событие.params);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	Если Не ТолькоПросмотр Тогда
		ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View()

	Возврат Элементы[ИмяПоляHTML].Документ.defaultView;

КонецФункции

&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция, УчитыватьОтступПервойСтроки)

	View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодПросмотраПеременных()

	Код = "";

	Если 0 < ПоказыватьЗначенияПеременныхПослеВыполнения Тогда

		Переменные = View().getVarsNames();

		Если 0 < Переменные.length Тогда

			СимволПС = Символы.ПС;

			Для Индекс = 0 По Переменные.length - 1 Цикл
				Имя = Переменные["" + Индекс + ""];
				Код = Код + СимволПС + "Попытка SPd201bf6.Вставить(""" + Имя + """,Вычислить(""" + Имя
					+ """)); Исключение КонецПопытки;" + СимволПС;
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Код;

КонецФункции

&НаКлиенте
Функция ТекстHTMLПоля(ДляВыполнения = Ложь)

	Код = View().getText();

	Переменные = ?(ДляВыполнения, ПолучитьКодПросмотраПеременных(), "");

	Код = Код + Переменные;

	Возврат Код;

КонецФункции

#КонецОбласти

#Область ВыполнениеКода

&НаКлиенте
Функция ПолучитьОшибку(ОписаниеОшибки)

	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);

	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");

	Если 0 < ПозицияРазделителя Тогда

		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));

		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");

		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);

		НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1));
		НомерСтроки = ?(НомерСтроки <> 0 И Не ПустаяСтрока(НомерСтроки), НомерСтроки, 0);

		НомерКолонки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2));
		НомерКолонки = ?(НомерКолонки <> 0 И Не ПустаяСтрока(НомерКолонки), НомерКолонки, 1);

		Ошибка.НомерСтроки = НомерСтроки;
		Ошибка.НомерКолонки = НомерКолонки;

	КонецЕсли;

	Возврат Ошибка;

КонецФункции

&НаКлиенте
Функция НайтиСтрокуВКоде(Строка)

	НомерСтроки = View().findText(Строка);

	Возврат НомерСтроки;

КонецФункции

&НаКлиенте
Функция ИзвлечьНомерСтрокиИзОписанияОшибки(ОписаниеОшибки)

	НомерСтроки = 0;
	ОткрывающаяСкобка = СтрНайти(ОписаниеОшибки, "(");

	Если 0 < ОткрывающаяСкобка Тогда

		ЗакрывающаяСкобка = СтрНайти(ОписаниеОшибки, ")", , ОткрывающаяСкобка);

		Если 0 < ЗакрывающаяСкобка Тогда

			Позиция = Сред(ОписаниеОшибки, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
			Подстроки = СтрРазделить(Позиция, ",");

			Попытка
				НомерСтроки = Число(Подстроки[0]);
			Исключение
				НомерСтроки = 0;
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Возврат НомерСтроки;

КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполнения(Результат)

	View().setCustomCodeLenses("[]");

	Если Не Результат.Успешно Тогда

		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);

		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;

		Если НомерСтроки = 0 Тогда
			НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Результат.ОписаниеОшибки);
		КонецЕсли;

		Если НомерСтроки = 0 Тогда
			НомерСтроки = НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		КонецЕсли;

		ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.ТекстОшибки);

		Если 0 < НомерСтроки Тогда
			View().markError(НомерСтроки, НомерКолонки);
		КонецЕсли;

	Иначе

		АдресХраненияПеременных = Результат.АдресХраненияПеременных;

		Если ЗначениеЗаполнено(Результат.ОписаниеПеременных) Тогда

			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда

				View().showVariablesDescription(Результат.ОписаниеПеременных);

			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда

				View().setCustomHovers(Результат.ОписаниеПеременных);

				Если Результат.ОписаниеПеременных <> "{}" Тогда
					View().setCustomCodeLenses(
						"[{""lineNumber"": 1,""column"": 1,""text"": ""Для просмотра значений наведите курсор на переменную""}]");
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруРезультата()

	СтруктуруРезультата = Новый Структура;
	СтруктуруРезультата.Вставить("Успешно", Ложь);
	СтруктуруРезультата.Вставить("ИсходнаяСтрока", "");
	СтруктуруРезультата.Вставить("ОписаниеОшибки", "");
	СтруктуруРезультата.Вставить("ОписаниеПеременных", "");
	СтруктуруРезультата.Вставить("АдресХраненияПеременных", "");

	Возврат СтруктуруРезультата;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения)

	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	SPd201bf6 = Новый Структура;

	Попытка
		Выполнить (Текст);
		RVS6e6c2a.Успешно = Истина;
		АдресПеременных = "";
		Попытка
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(SPd201bf6, АдресПеременных);
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(SPd201bf6);
			КонецЕсли;
			RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
		Исключение
			OS6e6c2a = ИнформацияОбОшибке();
			RVS6e6c2a.ОписаниеПеременных = "";
		КонецПопытки;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ИсходнаяСтрока = OS6e6c2a.ИсходнаяСтрока;
		Если OS6e6c2a.Причина <> Неопределено Тогда
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Причина.Описание;
		Иначе
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Описание;
		КонецЕсли;
	КонецПопытки;

	Возврат RVS6e6c2a;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКодНаСервере(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения)

	Возврат ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения);

КонецФункции

#КонецОбласти

#Область КонструкторЗапросов

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт

	Если Текст <> Неопределено Тогда

		Если Не View().queryMode Тогда
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;

		УстановитьТекст(Текст, ДопПараметры, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)

	Конструктор = Новый КонструкторЗапроса;

	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст = Текст;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение( , "Ошибка в тексте запроса:" + Символы.ПС + Инфо.Причина.Описание);
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТекстЗапроса(Текст)

	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");

	Возврат ТекстЗапроса;

КонецФункции

&НаКлиенте
Процедура ВызватьКонструкторЗапроса(ПараметрыЗапроса)

	Если ПараметрыЗапроса = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтотОбъект);
		ТекстВопроса = "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ПараметрыЗапроса.range);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

&НаКлиенте
Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт

	Если ФорматнаяСтрока <> Неопределено Тогда
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ФорматнаяСтрока, ДопПараметры, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)

	Конструктор = Новый КонструкторФорматнойСтроки;
	Попытка
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение( , "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВызватьКонструкторФорматнойСтроки(ПараметрыСтроки)

	Если ПараметрыСтроки = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтотОбъект);
		ТекстВопроса = "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

&НаСервере
Функция СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей)

	Файл = Новый ЗаписьJSON;
	Файл.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(Файл, КоллекцияОбщихМодулей.Общие);
	Исключение
		ВызватьИсключение ("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

	ЗначениеКоллекции = Файл.Закрыть();

	Возврат ПоместитьВоВременноеХранилище(ЗначениеКоллекции, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла)

#Если Не ВебКлиент Тогда

	СмещениеИмениВПути = 3;

	Путь = СтрРазделить(ПолноеИмяФайла, РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];

	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();

	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);

#Иначе

		Возврат Новый Структура("Имя, Текст", "", "");

#КонецЕсли

КонецФункции

&НаКлиенте
Процедура ВопросЗагрузкиОбщихМодулейЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда

		Состояние("Загрузка общих модулей...");
		Файлы = НайтиФайлы(ДопПараметры.КаталогМодулей, "Ext" + РазделительПути + "*.bsl", Истина);

		Для Каждого Файл Из Файлы Цикл
			ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя);
			View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
		КонецЦикла;

		Состояние("Общие модули загружены");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокОбщихМодулей()

	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(АдресОбщихМодулей);

	Если КоллекцияМетаданных <> Неопределено Тогда
		View().updateMetadata(КоллекцияМетаданных, "commonModules.items");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
#Область ДинамическоеОбновлениеМетаданных

&НаСервереБезКонтекста
Функция ОписатьОбщиеМодули(Коллекция, ФильтрГлобальный = Ложь)

	ОписаниеКоллекции = Новый Структура;

	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура);
		КонецЕсли;
	КонецЦикла;

	Возврат ОписаниеКоллекции;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоллекциюОбщихМодулей()

	КоллекцияОбщихМодулей = Новый Структура;
	КоллекцияОбщихМодулей.Вставить("Общие", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Ложь));
	КоллекцияОбщихМодулей.Вставить("Глобальные", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Истина));

	Возврат КоллекцияОбщихМодулей;

КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетаданных(ПолноеИмя)

	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)

	Объекты = Новый Массив;
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");

	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)

	Объекты = Новый Массив;
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");

	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)

	Объекты = Новый Массив;
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");

	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)

	Объекты = Новый Массив;
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");

	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)

	ОписаниеКоллекции = Новый Структура;

	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура);
	КонецЦикла;

	Возврат ОписаниеКоллекции;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов)

	СоответствиеИмен = Новый Соответствие;
	СоответствиеИмен.Вставить("справочники", "catalogs");
	СоответствиеИмен.Вставить("catalogs", "catalogs");
	СоответствиеИмен.Вставить("документы", "documents");
	СоответствиеИмен.Вставить("documents", "documents");
	СоответствиеИмен.Вставить("регистрысведений", "infoRegs");
	СоответствиеИмен.Вставить("informationregisters", "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления", "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters", "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии", "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters", "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета", "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters", "calcRegs");
	СоответствиеИмен.Вставить("обработки", "dataProc");
	СоответствиеИмен.Вставить("dataprocessors", "dataProc");
	СоответствиеИмен.Вставить("отчеты", "reports");
	СоответствиеИмен.Вставить("reports", "reports");
	СоответствиеИмен.Вставить("перечисления", "enums");
	СоответствиеИмен.Вставить("enums", "enums");
	СоответствиеИмен.Вставить("планысчетов", "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts", "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы", "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses", "businessProcesses");
	СоответствиеИмен.Вставить("задачи", "tasks");
	СоответствиеИмен.Вставить("tasks", "tasks");
	СоответствиеИмен.Вставить("планыобмена", "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans", "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик", "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes", "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета", "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes", "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы", "constants");
	СоответствиеИмен.Вставить("constants", "constants");
	СоответствиеИмен.Вставить("внешниеисточникиданных", "externalDataSources");
	СоответствиеИмен.Вставить("externaldatasources", "externalDataSources");

	Возврат СоответствиеИмен[ТипОбъектов];

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)

	Связь = "";

	Типы = Реквизит.Тип.Типы();

	Индекс = 0;

	Пока Индекс < Типы.Количество() И Не ЗначениеЗаполнено(Связь) Цикл

		Тип = Типы[Индекс];

		СвязьТипа = Связи[Тип];

		Если СвязьТипа = Неопределено Тогда

			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);

			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описыватьются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;

			КонецЕсли;

			Связи[Тип] = Связь;

		Иначе

			Связь = СвязьТипа;

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

	Возврат Связь;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)

	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");

	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);

	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;

	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления)

	ОписаниеМетаданных = "";

	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);

	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда

		Коллекция = Метаданные[ТипОбъектов];

		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);

		Файл = Новый ЗаписьJSON;
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СписокОбъектов);
		Исключение
			ВызватьИсключение ("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;

		ОписаниеМетаданных = Файл.Закрыть();

		АдресОбновления = ИмяКоллекции + ".items";

	КонецЕсли;

	Возврат ОписаниеМетаданных;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)

	ТипРегистра = "";

	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда

		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;

		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;

	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда

		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли;

	Иначе

		ТипРегистра = "";

	КонецЕсли;

	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)

	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда

		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда

			Запрос = Новый Запрос("ВЫБРАТЬ
								  |	ТаблицаПланаСчетов.Код КАК Код,
								  |	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
								  |ИЗ
								  |	&Таблица КАК ТаблицаПланаСчетов
								  |ГДЕ
								  |	ТаблицаПланаСчетов.Предопределенный");

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);

			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;

		Иначе

			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();

			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеРесурсов,
	ДополнительныеСвойства, Связи)

	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда

		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;

		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;

		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей,
	Связи)

	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда

		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл

			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));

			ОписаниеТабличнойЧасти = Новый Структура;

			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;

			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;

			СтруктураТабличнойЧасти = Новый Структура;
			СтруктураТабличнойЧасти.Вставить("properties", ОписаниеТабличнойЧасти);

			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, СтруктураТабличнойЧасти);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)

	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)

	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда

		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)

	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных)

	СтруктураИсточника = Новый Структура;

	ОписаниеТаблиц = Новый Структура;

	Для Каждого Таблица Из ОбъектМетаданных.Таблицы Цикл

		ОбъектныеДанные = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные;
		ТипТаблицы = ?(Таблица.ТипДанныхТаблицы = ОбъектныеДанные, "ObjectData", "NonobjectData");

		СтруктураТаблицы = Новый Структура;
		СтруктураТаблицы.Вставить("tableDataType", ТипТаблицы);

		ПоляТаблицы = Новый Структура;
		Для Каждого Поле Из Таблица.Поля Цикл
			ПоляТаблицы.Вставить(Поле.Имя, Новый Структура("name", Поле.Синоним));
		КонецЦикла;

		СтруктураТаблицы.Вставить("properties", ПоляТаблицы);

		ОписаниеТаблиц.Вставить(Таблица.Имя, СтруктураТаблицы);

	КонецЦикла;

	СтруктураИсточника.Вставить("tables", Новый Структура("items", ОписаниеТаблиц));

	Возврат СтруктураИсточника;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных)

	СтруктураИсточника = ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных);
	Для Каждого Обход Из СтруктураИсточника Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя)

	ОписаниеРеквизитов = Новый Структура;
	ОписаниеРесурсов = Новый Структура;
	ОписаниеПредопределенных = Новый Структура;
	ОписаниеТабличныхЧастей = Новый Структура;
	ДополнительныеСвойства = Новый Структура;

	Связи = Новый Соответствие;

	Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
		ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
	Иначе
		ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
		ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеРесурсов,
			ДополнительныеСвойства, Связи);
		ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей,
			Связи);
	КонецЕсли;

	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);

	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;

	Если 0 < ОписаниеРесурсов.Количество() Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;

	Если 0 < ОписаниеПредопределенных.Количество() Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных);
	КонецЕсли;

	Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления)

	ОписаниеМетаданных = "";

	Части = СтрРазделить(ТипОбъекта, ".");

	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);

	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда

		ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();

		СтруктураОбъекта = Новый Структура;

		Если 0 < СтрНайти(ИмяМетаданных(ПолноеИмя), "ВнешнийИсточникДанных") Тогда
			ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных);
		Иначе
			ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя);
		КонецЕсли;

		Файл = Новый ЗаписьJSON;
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение ("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;

		АдресОбновления = ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;

		ОписаниеМетаданных = Файл.Закрыть();

	КонецЕсли;

	Возврат ОписаниеМетаданных;

КонецФункции

&НаКлиенте
Функция ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса)

	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);

	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда

		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Функция ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса)

	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);

	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда

		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие)

	ПараметрыЗапроса = НРег(Событие.metadata);
	ДанныеОбновлены = Ложь;

	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда

		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");

		Если ЧастиЗапроса[0] <> "module" Тогда

			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса);

		КонецЕсли;

	Иначе

		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса);

	КонецЕсли;

	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		View().triggerSuggestions();
	КонецЕсли;

	Если Событие.trigger = "snippet" Тогда
		View().updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияПолученияПеременной(Событие)

	ИмяПеременной = Событие.variableName;
	ИдентификаторПеременной = Событие.variableId;

	ПутьКДанным = Событие.variablePath;
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "undefined", "");

	Описание = ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных);

	Если ЗначениеЗаполнено(Описание) Тогда
		View().updateVariableDescription(ИдентификаторПеременной, Описание);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляПодсказокПриНаведении

&НаСервереБезКонтекста
Функция ДополнитьСтроку(Знач Результат, СимволовДополнить, Дополнение = " ", Слева = Истина)

	Стр = "";

	Для Сч = 1 По СимволовДополнить Цикл
		Стр = Стр + Дополнение;
	КонецЦикла;

	Возврат ?(Слева, Стр + Результат, Результат + Стр);

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылка(Ссылка)

	ЭтоСсылка = Ложь;

	ТипЗнч = ТипЗнч(Ссылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);

	Если ОбъектМетаданных <> Неопределено Тогда

		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Массив = СтрРазделить(ПолноеИмя, ".");
		Массив[0] = Массив[0] + "Ссылка";
		ИмяТипа = СтрСоединить(Массив, ".");

		Попытка
			ЭтоСсылка = (ТипЗнч = Тип(ИмяТипа));
		Исключение
			ЭтоСсылка = Ложь;
		КонецПопытки;

	КонецЕсли;

	Возврат ЭтоСсылка;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяОбъектаМетаданных(Ссылка)

	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));

	Если ОбъектМетаданных <> Неопределено Тогда
		Возврат СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".").Получить(0);
	КонецЕсли;

	Возврат "";

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТабличнаяЧасть(Ссылка)

	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));

	Если Результат <> Неопределено Тогда

		Если ОбъектМетаданныхИмеетТЧ(Результат.Родитель().ПолноеИмя()) Тогда
			Возврат Результат.Родитель().ТабличныеЧасти.Найти(Результат.Имя) <> Неопределено;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСтрокаТабличнойЧасти(Ссылка)

	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);

	Если Результат <> Неопределено Тогда

		Родитель = Результат.Родитель();
		ИмяРодителя = Родитель.ПолноеИмя();

		Если ОбъектМетаданныхИмеетТЧ(ИмяРодителя) Тогда

			ЧастиИмени = СтрРазделить(ИмяРодителя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);

			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);

			Если ТабличнаяЧасть <> Неопределено Тогда

				ИмяТипа = СтрШаблон("%1ТабличнаяЧастьСтрока.%2.%3", Имя1, Имя2, ТабличнаяЧасть.Имя);

				Попытка
					Возврат (ТипЗнч = Тип(ИмяТипа));
				Исключение
					Возврат Ложь;
				КонецПопытки;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЗаписьНабораЗаписей(Ссылка)

	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);

	Если Результат <> Неопределено Тогда

		ПолноеИмя = Результат.ПолноеИмя();

		Если 0 < СтрНайти(ПолноеИмя, "Регистр") Или 0 < СтрНайти(ПолноеИмя, "Register") Тогда

			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			ИмяТипа = СтрШаблон("%1Запись.%2", Имя1, Имя2);

			Попытка
				Возврат (ТипЗнч = Тип(ИмяТипа));
			Исключение
				Возврат Ложь;
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСтрокиТабличнойЧасти(Строка)

	Реквизиты = Новый Массив;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Строка));

	Если Результат <> Неопределено Тогда

		Родитель = Результат.Родитель();

		Если ОбъектМетаданныхИмеетТЧ(Родитель.ПолноеИмя()) Тогда

			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);

			Реквизиты.Добавить(Новый Структура("Имя", "НомерСтроки"));

			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				Реквизиты.Добавить(Реквизит);
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Реквизиты;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыНабораЗаписей(Запись)

	Реквизиты = Новый Массив;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Запись));

	Если Результат <> Неопределено Тогда

		Для Каждого Измерение Из Результат.Измерения Цикл
			Реквизиты.Добавить(Измерение);
		КонецЦикла;

		Для Каждого Ресурс Из Результат.Ресурсы Цикл
			Реквизиты.Добавить(Ресурс);
		КонецЦикла;

		Для Каждого Реквизит Из Результат.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
	КонецЕсли;

	Возврат Реквизиты;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМенеджерЗаписиРегистра(Значение)

	ЭтоМенеджерЗаписи = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));

	Если Результат <> Неопределено Тогда

		Имя = Результат.ПолноеИмя();

		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоМенеджерЗаписи = (Тип("РегистрСведенийМенеджерЗаписи." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоМенеджерЗаписи = Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат ЭтоМенеджерЗаписи;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНаборЗаписейРегистра(Значение)

	ЭтоНаборЗаписей = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));

	Если Результат <> Неопределено Тогда

		Имя = Результат.ПолноеИмя();

		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрСведенийНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрНакопления") = 1 И Метаданные.РегистрыНакопления.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрНакопленияНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрРасчета") = 1 И Метаданные.РегистрыРасчета.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрРасчетаНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрБухгалтери") = 1 И Метаданные.РегистрыБухгалтерии.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрБухгалтерииНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоНаборЗаписей = Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат ЭтоНаборЗаписей;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПеречисление(Значение)

	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	Возврат Результат <> Неопределено И СтрНайти(Результат.ПолноеИмя(), "Перечисление") = 1;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСсылки(Значение, КешСсылок, HTMLTag)

	Представление = КешСсылок[Значение];

	Если Представление = Неопределено Тогда

		Попытка
			Если Не Значение.Пустая() Тогда
				Ссылка = ПолучитьНавигационнуюСсылку(Значение);
				Если HTMLTag Тогда
					Представление = СтрШаблон("<a href='%1'>%2</a>", Ссылка, Строка(Значение));
				Иначе
					Представление = СтрШаблон("[%1](%2)", Строка(Значение), Ссылка);
				КонецЕсли;
			Иначе
				Представление = "";
			КонецЕсли;
		Исключение
			Представление = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;

		КешСсылок[Значение] = Представление;

	КонецЕсли;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", Заголовок, Значение.Количество()));
	Индекс = 0;

	Для Каждого СтрокаТЗ Из Значение Цикл

		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);

		Для Каждого Колонка Из Значение.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(СтрокаТЗ[Колонка.Имя],
				Смещение, КешСсылок));
		КонецЦикла;

		Индекс = Индекс + 1;

	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, СтрокаДерева, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	Индекс = 0;

	Для Каждого Строка Из СтрокаДерева.Строки Цикл

		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);

		Для Каждого Колонка Из Дерево.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(Строка[Колонка.Имя],
				Смещение, КешСсылок));
		КонецЦикла;

		Индекс = Индекс + 1;

		МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Строка, Смещение + 1, КешСсылок));

	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДереваЗначений(Дерево, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", "Дерево значений", Дерево.Строки.Количество()));
	МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Дерево, Смещение, КешСсылок));

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок)

	Таблица = Значение.Владелец();

	Представление = "**Строка таблицы значений:**" + Символы.ПС;

	Для Каждого Колонка Из Таблица.Колонки Цикл
		Представление = Представление + Символы.ПС;
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		Представление = Представление + Маркер + Колонка.Имя + ": ";
		Представление = Представление + ПолучитьПредставлениеПеременной(Значение[Колонка.Имя], Смещение, КешСсылок);
	КонецЦикла;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок)

	ТипЗнч = ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	МассивСтрок = Новый Массив;

	МассивСтрок.Добавить(СтрШаблон("**%1:**", ТипЗнч));
	МассивСтрок.Добавить(Символы.ПС);

	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя],
			Смещение, КешСсылок));
	КонецЦикла;

	Для Каждого Измерение Из ОбъектМетаданных.Реквизиты Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя],
			Смещение, КешСсылок));
	КонецЦикла;

	Для Каждого Измерение Из ОбъектМетаданных.Ресурсы Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя],
			Смещение, КешСсылок));
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийМассива(МассивСписок, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;

	ТипЗнч = ТипЗнч(МассивСписок);
	ЭтоМассив = (ТипЗнч = Тип("Массив"));
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч, МассивСписок.Количество()) + Символы.ПС);
	Индекс = 0;

	Для Каждого Значение Из МассивСписок Цикл

		Маркер = ДополнитьСтроку("- (" + Индекс + ") ", Смещение * 4, " ");

		Если ЭтоМассив Тогда
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение, Смещение, КешСсылок));
		Иначе
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение.Значение, Смещение, КешСсылок));
		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЭлементаСпискаЗначений(ЭлементСписка, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("**Элемент списка значений**:");

	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(ЭлементСписка.Значение, Смещение,
		КешСсылок));

	Представление = ЭлементСписка.Представление;

	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = Строка(ЭлементСписка.Значение);
	КонецЕсли;

	МассивСтрок.Добавить(Маркер + "Представление: " + Представление);
	МассивСтрок.Добавить(Маркер + "Пометка: " + ЭлементСписка.Пометка);

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКлючаЗначения(КлючЗначение, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("**Ключ и значение**:");

	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Ключ: " + КлючЗначение.Ключ);
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(КлючЗначение.Значение, Смещение,
		КешСсылок));

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч(Значение), Значение.Количество()));

	Для Каждого Стр Из Значение Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Стр.Ключ + ": " + ПолучитьПредставлениеПеременной(Стр.Значение, Смещение,
			КешСсылок));
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЗапроса(Запрос, Смещение, КешСсылок)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("**Запрос**:");

	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");

	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Не установлен");
	Иначе
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Установлен");
	КонецЕсли;

	ПредставлениеПараметров = ПолучитьПредставлениеСтруктурыСоответствия(Запрос.Параметры, Смещение + 1, КешСсылок);
	МассивСтрок.Добавить(ПредставлениеПараметров);

	МаркерТекста = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
	МассивСтрок.Добавить(Маркер + "Текст: " + Символы.ПС + МаркерТекста + Запрос.Текст);

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременной(Значение, Знач Смещение, КешСсылок)

	Представление = "";
	ТипЗнч = ТипЗнч(Значение);

	Смещение = Смещение + 1;

	Если ТипЗнч = Тип("Число") Или ТипЗнч = Тип("Строка") Или ТипЗнч = Тип("Булево") Или ТипЗнч = Тип("Дата") Тогда
		Представление = Строка(Значение);
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Представление = "Null";
	ИначеЕсли ТипЗнч = Тип("Структура") Или ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("Массив") Или ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = ПолучитьПредставлениеСпискаЗначенийМассива(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = ПолучитьПредставлениеКлючаЗначения(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = ПолучитьПредставлениеЭлементаСпискаЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Заголовок = НСтр("en = 'Value table'; ru = 'Таблица значений'");
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = ПолучитьПредставлениеДереваЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Представление = ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Представление = Строка(Значение);
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = ПолучитьПредставлениеЗапроса(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Ложь);
	Иначе
		Представление = Строка(Значение);
		Если ПустаяСтрока(Представление) Тогда
			Представление = Строка(ТипЗнч);
		КонецЕсли;
	КонецЕсли;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(ЗначенияПеременных)

	Описание = Новый Структура;
	КешСсылок = Новый Соответствие;

	Для Каждого Обход Из ЗначенияПеременных Цикл
		Представление = ПолучитьПредставлениеПеременной(Обход.Значение, -1, КешСсылок);
		Описание.Вставить(Обход.Ключ, Представление);
	КонецЦикла;

	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);

	Возврат Запись.Закрыть();

КонецФункции

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляВыводаВТабло

&НаСервереБезКонтекста
Функция ПолучитьКартинкуДляПредставленияСсылки(Ссылка)

	ИмяОбъекта = ПолучитьИмяОбъектаМетаданных(Ссылка);

	Имена = Новый Соответствие;
	Имена.Вставить("Справочник", "catalog");
	Имена.Вставить("Catalog", "catalog");
	Имена.Вставить("Документ", "document");
	Имена.Вставить("Document", "document");
	Имена.Вставить("БизнесПроцесс", "bprocess");
	Имена.Вставить("BusinessProcess", "bprocess");
	Имена.Вставить("Задача", "task");
	Имена.Вставить("Task", "task");

	Картинка = Имена[ИмяОбъекта];

	Если Картинка = Неопределено Тогда
		Картинка = "structure";
	КонецЕсли;

	Возврат Картинка;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьКДанным, КешСсылок)

	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	Картинка = "";
	Класс = "";

	Если ТипЗнч = Тип("Число") Тогда
		Представление = Строка(Значение);
		Картинка = "int";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Строка") Тогда
		Представление = Строка(Значение);
		Картинка = "string";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Булево") Тогда
		Представление = Строка(Значение);
		Картинка = "boolean";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Дата") Тогда
		Картинка = "date";
		Представление = Строка(Значение);
		Класс = "final";
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Картинка = "null";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("УникальныйИдентификатор") Тогда
		Представление = Строка(Значение);
		Картинка = "uuid";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ДвоичныеДанные") Тогда
		Картинка = "binary";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Картинка") Тогда
		Картинка = "picture";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Структура") Или ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("Массив") Или ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Картинка = "table";
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Строки.Количество());
		Картинка = "tree";
		Если Значение.Строки.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
		Представление = "";
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Картинка = "storage";
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "query";
	ИначеЕсли ТипЗнч = Тип("МенеджерВременныхТаблиц") Тогда
		Представление = "";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
		Представление = СтрШаблон("Движения (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("ТабличныйДокумент") Тогда
		Картинка = "tabular";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ТекстовыйДокумент") Или ТипЗнч = Тип("ЧтениеТекста") Или ТипЗнч = Тип("ЧтениеXML")
		Или ТипЗнч = Тип("ЧтениеJSON") Или ТипЗнч = Тип("ЧтениеHTML") Или ТипЗнч = Тип("ЗаписьJSON") Или ТипЗнч = Тип(
		"ЗаписьXML") Или ТипЗнч = Тип("ЗаписьТекста") Или ТипЗнч = Тип("ЧтениеZipФайла") Или ТипЗнч = Тип("Файл") Тогда
		Картинка = "text";
		Класс = "final";
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
		Картинка = "enum";
		Класс = "final";
	ИначеЕсли ЭтоСтрокаТабличнойЧасти(Значение) Тогда
		Представление = "";
		Картинка = "table";
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = СтрШаблон("Табличная часть (%1)", Значение.Количество());
		Картинка = "table";
	ИначеЕсли ЭтоЗаписьНабораЗаписей(Значение) Тогда
		Картинка = "table";
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = СтрШаблон("Набор записей (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Картинка = "structure";
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Истина);
		Если СтрНайти(Представление, "</a>") Тогда
			Представление = СтрЗаменить(Представление, """", "");
			Представление = СтрЗаменить(Представление, Символы.Таб, "");
		КонецЕсли;
		Картинка = ПолучитьКартинкуДляПредставленияСсылки(Значение);
	Иначе
		Попытка
			Представление = Строка(Значение);
		Исключение
			Представление = Строка(ТипЗнч);
		КонецПопытки;
		Класс = "final";
	КонецЕсли;

	Переменная = Новый Структура;
	Переменная.Вставить("label", Имя);
	Переменная.Вставить("value", Представление);
	Переменная.Вставить("type", Строка(ТипЗнч));
	Переменная.Вставить("path", ПутьКДанным);
	Переменная.Вставить("class", Класс);

	Если ЗначениеЗаполнено(Картинка) Тогда
		Переменная.Вставить("icon", Картинка + ".png");
	КонецЕсли;

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция НовыйИдентификаторПеременной()

	Возврат "var_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСсылочнойПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	ОбъектМетаданных = Ссылка.Метаданные();
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();

	ЗначениеРеквизита = Ссылка.УникальныйИдентификатор();
	ПутьРеквизита = ПутьКДанным + ".УникальныйИдентификатор";
	ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, "УникальныйИдентификатор", ПутьРеквизита,
		КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);

	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмяОбъектаМетаданных) Тогда

		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл

			Если Реквизит.Имя <> "Ссылка" Тогда
				ЗначениеРеквизита = Ссылка[Реквизит.Имя];
				ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
				ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита,
					КешСсылок);
				ИдентификаторПеременной = НовыйИдентификаторПеременной();
				ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ЗначениеРеквизита = Ссылка[Реквизит.Имя];
		ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	КонецЦикла;

	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмяОбъектаМетаданных) Тогда

		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ЗначениеРеквизита = Ссылка[ТабличнаяЧасть.Имя];
			ПутьРеквизита = ПутьКДанным + "." + ТабличнаяЧасть.Имя;
			ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, ТабличнаяЧасть.Имя, ПутьРеквизита,
				КешСсылок);
			ИдентификаторПеременной = НовыйИдентификаторПеременной();
			ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
		КонецЦикла;

	КонецЕсли;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТаблицыЗначений(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Индекс = 0;

	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЗ, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТаблицыЗначений(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Колонки = СтрокаТаблицы.Владелец().Колонки;

	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаТаблицы[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТабличнойЧасти(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Реквизиты = ПолучитьРеквизитыСтрокиТабличнойЧасти(СтрокаТЧ);

	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = СтрокаТЧ[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗаписиНабораЗаписей(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);

	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеДереваЗначений(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Индекс = 0;

	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + ".Строки[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиДереваЗначений(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Колонки = СтрокаДерева.Владелец().Колонки;

	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаДерева[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Если 0 < СтрокаДерева.Строки.Количество() Тогда
		ПутьСтроки = ПутьКДанным + ".Строки";
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева.Строки, "Строки", ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЕсли;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииСтрокДереваЗначений(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Индекс = 0;

	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСоответствияСтруктуры(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок);

	ЭтоСоответствие = (ТипЗнч(Соответствие) = Тип("Соответствие"));
	ДанныеПеременной = Новый Структура;

	Для Каждого Обход Из Соответствие Цикл

		Если ЭтоСоответствие Тогда
			ПутьЗначения = ПутьКДанным + "[&quote;" + Обход.Ключ + "&quote;]";
		Иначе
			ПутьЗначения = ПутьКДанным + "." + Обход.Ключ;
		КонецЕсли;

		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);

	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМассива(Массив, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Массив, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;
	Индекс = 0;

	Для Каждого Значение Из Массив Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКлючаИЗначения(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Путь = ПутьКДанным + ".Ключ";
	Имя = "Ключ";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Ключ, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЭлементаСпискаЗначений(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".Пометка";
	Имя = "Пометка";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Пометка, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".Представление";
	Имя = "Представление";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Представление, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСпискаЗначений(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;
	Индекс = 0;

	Для Каждого Обход Из СписокЗначений Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииДвижений(Движения, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Движения, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;
	Индекс = 0;

	Для Каждого Движение Из Движения Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Движение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМенеджераЗаписейРегистра(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);

	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗапроса(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок);

	ДанныеПеременной = Новый Структура;

	Путь = ПутьКДанным + ".Текст";
	Имя = "Текст";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Текст, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".Параметры";
	Имя = "Параметры";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Параметры, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Путь = ПутьКДанным + ".МенеджерВременныхТаблиц";
	Имя = "МенеджерВременныхТаблиц";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.МенеджерВременныхТаблиц, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);

	Переменная.Вставить("children", ДанныеПеременной);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеХранилищаЗначения(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок)

	Данные = ХранилишеЗначения.Получить();

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок);

	Путь = ПутьКДанным + ".Получить()";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Данные, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеХранилища = Новый Структура(ИдентификаторПеременной, ДанныеЗначения);

	Переменная.Вставить("children", ДанныеХранилища);

	Возврат Переменная;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных)

	Данные = ПолучитьИзВременногоХранилища(АдресХраненияПеременных);
	ХранилищеПеременных = Данные.ХранилищеПеременных;
	ХранилищеПеременных = ХранилищеПеременных;
	КешСсылок = Данные.КэшСсылок;

	Попытка

		Описание = Неопределено;
		Путь = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИдентификаторПеременной);
		Путь = СтрЗаменить(Путь, "&quote;", """");
		ЗначениеПеременной = Вычислить("ХранилищеПеременных." + Путь);
		Путь = СтрЗаменить(Путь, """", "&quote;");
		ТипЗнч = ТипЗнч(ЗначениеПеременной);

		Если ТипЗнч = Тип("ТаблицаЗначений") Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
			Описание = ПолучитьОписаниеДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
			Описание = ПолучитьОписаниеКоллекцииСтрокДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Соответствие") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Массив") Тогда
			Описание = ПолучитьОписаниеМассива(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Структура") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
			Описание = ПолучитьОписаниеКлючаИЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СписокЗначений") Тогда
			Описание = ПолучитьОписаниеСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
			Описание = ПолучитьОписаниеЭлементаСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
			Описание = ПолучитьОписаниеЗапроса(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
			Описание = ПолучитьОписаниеКоллекцииДвижений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
			Описание = ПолучитьОписаниеХранилищаЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСсылка(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСсылочнойПеременной(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСтрокаТабличнойЧасти(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСтрокиТабличнойЧасти(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоТабличнаяЧасть(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоЗаписьНабораЗаписей(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеЗаписиНабораЗаписей(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоНаборЗаписейРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоМенеджерЗаписиРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеМенеджераЗаписейРегистра(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		КонецЕсли;

		Если Описание <> Неопределено Тогда
			Результат = Новый Структура(ИдентификаторПеременной, Описание);
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Результат);
			Возврат Запись.Закрыть();
		Иначе
			ВызватьИсключение ("Неизвестный тип переменной");
		КонецЕсли;

		Данные.КэшСсылок = КешСсылок;
		ПоместитьВоВременноеХранилище(Данные, АдресХраненияПеременных);

	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(Ошибка);
	КонецПопытки;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременныхДляВыводВТабло(ЗначенияПеременных, АдресХраненияПеременных)

	Описание = Новый Структура;
	КешСсылок = Новый Соответствие;
	ХранилищеПеременных = Новый Структура;

	Для Каждого Обход Из ЗначенияПеременных Цикл
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		Переменная = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, "", КешСсылок);
		Описание.Вставить(ИдентификаторПеременной, Переменная);
		ХранилищеПеременных.Вставить(ИдентификаторПеременной, Обход.Значение);
	КонецЦикла;

	Данные = Новый Структура;
	Данные.Вставить("ХранилищеПеременных", ХранилищеПеременных);
	Данные.Вставить("КэшСсылок", КешСсылок);

	АдресХраненияПеременных = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);

	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);

	Возврат Запись.Закрыть();

КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт

	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)

	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеБыстрымиПодсказками()

	Элементы.ПроизвольныйКодБыстрыеПодсказки.Пометка = БыстрыеПодсказки;

КонецПроцедуры

&НаКлиенте
Функция ВебДокументДоступен()

	Если Элементы[ИмяПоляHTML].Документ <> Неопределено И Элементы[ИмяПоляHTML].Документ.defaultView <> Неопределено Тогда
		Попытка
			ТекстHTMLПоля();
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОпределитьРазделительПути()

	РазделительПути = ПолучитьРазделительПути();

КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт

	ИндексныйФайл = "";

	Если ДопПараметры.СтандартноеЗакрытие Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль(СтандартноеЗакрытие)

	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		ПараметрыОповещения = Новый Структура("СтандартноеЗакрытие", СтандартноеЗакрытие);
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект, ПараметрыОповещения);
		НачатьУдалениеФайлов(Оповещение, ИндексныйФайл);
	Иначе
		Если СтандартноеЗакрытие Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОпределитьДоступностьЭлементаДляРедактирования()

	Если Объект.Ссылка = Справочники.УБТ_СценарииБотовTelegram.СценарийАвторизацииЧатов() Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоТипуДействия()

	Элементы.СтраницыСценария.Видимость = ЗначениеЗаполнено(Объект.ТипСценария);

	Если Не Элементы.СтраницыСценария.Видимость Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.ОтправкаОтчета Тогда
		Элементы.СтраницыСценария.ТекущаяСтраница = Элементы.СтраницаОтчеты;
	ИначеЕсли Объект.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.Общение Тогда
		Элементы.СтраницыСценария.ТекущаяСтраница = Элементы.СтраницаОбщение;
	ИначеЕсли Объект.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.ПроизвольныйСценарий Тогда
		Элементы.СтраницыСценария.ТекущаяСтраница = Элементы.СтраницаПроизвольныйКод;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьИмяПоляHTML()

	Если Объект.ТипСценария = Перечисления.УБТ_ТипыСценариевБотовTelegram.Общение Тогда
		ИмяПоляHTML = "ЭтапыПроизвольныйКод";
	Иначе
		ИмяПоляHTML = "ПроизвольныйКод";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти